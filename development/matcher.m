(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["matcher`"]
(*BeginPackage["matcher`",{"Susyno`IO`","Susyno`LieGroups`"}]*)




TotalMatcher::usage="TotalMatcher[modeldir] takes a model directory  and performs a full matching, returning a list of four list, with\[IndentingNewLine]the tree level matching, check of tree level matching, one loop matching and check of one loop matching.\[IndentingNewLine]Currently each list contains another list with the results for the following sets of operators  \[IndentingNewLine]{L4SM,L6SM_0F,L6SM_2F_0S_3D,L6SM_2F_1S_2D,L6SM_2F_2S_1D,L6SM_2F_3S_0D}";

GetGaugeData::usage=
"GetGaugeData[modelname] returns an array with the data of the gauge groups in the model. The structure is the name of the gauge group, with the name of the structure functions in case it is non-abelian, followed by a list of dimension 4 for each representation of the group. This list contains the name of the Generator, the name of the index, the variable used of the index and the range of the index.";
ComplexConjugate::usage="";
CheckHermiticityAndSymmetry::usage="";
PutParenthesisInAlphas::usage="";
GetParameters::usage="";
GetGaugeIndicesAndRanges::usage="";
GetGaugeIndices::usage="";
Splitter::usage="";
SumExpandIndicesFast2::usage="";
TreatDummyFlavor::usage="";
TreatDummyLorentzFast::usage="";
TreatDummyFlavorGeneral::usage="";
SumIndices2::usage="";
GetIndices::usage="";
IndexType::usage="";
SumExpandIndicesEfficient2::usage="";

GetDictionary::usage="";
MatchOneAmplitudeFastest2::usage="";

EliminatParenthesisInAlphas::usage="";
EliminatParenthesisInAlphasGeneral::usage="";
SumIndicesEfficient2::usage="";

ManipulateSingleAmplitudeOriginalFast2::usage="";

GetAlphas::usage="";
GetAlphasGeneral::usage="";
mes;
mes2;
iamp;
allamp;
whichamp;


(*NewEpsExpansion::usage="";
StripIndex::usage="";
MatchOneAmplitudeFastest::usage="";
MatchOneAmplitudeFastest2::usage="";
MatchOneAmplitudeFastest3::usage="";
ManipulateAmplitudeFast::usage="";
EpsExpansion::usage="";
PartialMatcherFast::usage="";
TotalMatcherFast::usage="";
PartialMatcherFaster::usage="";
PartialMatcherFastest::usage="";
PartialMatcherFastest2::usage="";
TotalMatcherFaster::usage="";
ManipulateSingleAmplitudeOriginal::usage="";
ManipulateSingleAmplitudeOriginalFast::usage="";
DummyIndexRule::usage="";
TreatAllDummy::usage="";
ExpandIndicesEfficient::usage="";
SumIndicesEfficient::usage="";
SumIndicesEfficient2::usage="";
ExpandIndicesEfficient2::usage="";
ExpandIndices2::usage="";
SumIndices::usage="";
MomentumConservation::usage="";
EliminatParenthesisInAlphas::usate="";
Splitter::usage="";
GetVectorList::usage="";
GenerateEpsGam::usage="";
ManipulateSingleAmplitude::usage="";
StandardOrdering::usage="";
StandardOrderingNoSign::usage="";
OrderedGamNonStripped::usage="";
TreatDummy4Fermion::usage="";
TreatDummy2Fermion::usage="";
TreatDummy::usage="";
TreatDummyFlavor::usage="";
TreatDummyLorentz::usage="";
CheckIndex::usage="";
(*
ReplaceGen::usage="ReplaceGen[inp, list] substitutes all generators in inp by their actual representations, according to the gauge information included in list"
Replacefs::usage="Replacefs[inp, list] substitutes all structure constants in inp by their actual values, according to the gauge information included in list"
*)

GetDictionary::usage="GetDictionary[modelname] returns a list of two dictionaries -associations- that return the amplitude that corresponds to each list of particles involved. The first dictionary corresponds to tree level and the second one to one loop. If only tree level results are present then the list is of length one";
GetGaugeIndicesAndRanges::usage="GetGaugeIndicesAndRanges[modelname] returns an array with the names of the variables used for the gauge indices and their range.";

GetGaugeIndices::usage="GetGaugeIndices[modelname] returns a list with the names of the variables used for the gauge indices";

ExpandIndices::usage="ExpandIndices[exp,indr] evaluates exp by summing over internal indices and expanding over external ones according to indr, which is the output of GetGaugeIndices and Ranges"; 

GetAlphas::usage="GetAlphas[exp] returns a list with the alpha variables present in exp";
GetIndices::usage="";
AssignNumberToScalarsFermionsVectors::usage="AssignNumberToScalarsFermionsVectors[str_List,nsfv_List] takes a list of strings str with names of particles and a list of three numbers nsfv such that it assigns to each of the particles in str the corresponding number in nsfv depending on whether they are scalars, fermions or vectors, respectively"
checkforme::usage=""

AssignNumberToScalarsFermionsVectorsbis::usage="AssignNumberToScalarsFermionsVectors[str_List,nsfv_List] takes a list of strings str with names of particles and a list of three numbers nsfv such that it assigns to each of the particles in str the corresponding number in nsfv depending on whether they are scalars, fermions or vectors, respectively"

GetMassDimensionFromFields::usage="GetMassDimensionFromFields[str] takes a list of strings with the names of light particle names and computes the mass dimension corresponding to this set of particles"

KinematicsGeneral::usage="KinematicsGeneral[lista,massdim] takes as input the list of particles involved in the process and the mass dimension of the 
corresponding operator and returns a list with all 
possible kinematical invariants, including scalar products of the relevant momenta and polarizations, strings
of gamma matrices, etc. The result is given in standard ordering and without repetitions."

ExtractKinematics::usage="ExtractKinematics[lista,amplitude,opdimx] takes the list of external particles and 
an amplitude and extracts the coefficients of all possible kinematic structures,
assuming operator of dimension opdimx"

ManipulateAmplitude::usage=" ManipulateAmplitude[lista,dicE,dicF,opdimx] takes the list of external particles 
and the effective and full dictionaries plus the dimension of the corresponding operator
and performs common manipulations in the amplitude, including momentum conservation, extraction
of the correct operator dimension, DR expansion, etc.";

PartialMatcher::usage="PartialMatcher[dicE,dicF,opdimx] takes two dictionaries with amplitudes as a function of list of external particles for the effective theory dicE and for the full theory dicF and the mass dimension of the operators we are matching and returns a list of matched coefficients and the effects on the matching "

callpm::usage=""
TotalMatcher::usage="TotalMatcher[modeldir] takes a model directory  and performs a full matching, returning a list of four list, with
the tree level matching, check of tree level matching, one loop matching and check of one loop matching.
Currently each list contains another list with the results for the following sets of operators  
{L4SM,L6SM_0F,L6SM_2F_0S_3D,L6SM_2F_1S_2D,L6SM_2F_2S_1D,L6SM_2F_3S_0D}"

TotalMatchernew::usage="TotalMatcher[modeldir] takes a model directory  and performs a full matching, returning a list of four list, with
the tree level matching, check of tree level matching, one loop matching and check of one loop matching.
Currently each list contains another list with the results for the following sets of operators  
{L4SM,L6SM_0F,L6SM_2F_0S_3D,L6SM_2F_1S_2D,L6SM_2F_2S_1D,L6SM_2F_3S_0D}"
(*lightscalars::usage=""*)

GetsSSOrder::usage="GetsSSOrder[exp,x] gets the coefficient of the term of order sSS^x of exp"
*)





Begin["`Private`"]


(*listareplacesymmetry={alphaF19[f95,f97,f99,f93]\[Rule]alphaF19[f99,f97,f95,f93],alphaF20[f95,f97,f99,f93]\[Rule]alphaF20[f99,f97,f95,f93],alphaO44[f95,f97,f99,f93]\[Rule]alphaO44[f99,f97,f95,f93],alphaO45[f95,f97,f99,f93]\[Rule]alphaO45[f99,f97,f95,f93],alphaO48[f95,f97,f99,f93]\[Rule]alphaO48[f99,f97,f95,f93],alphaO48[f95,f93,f99,f97]\[Rule]alphaO48[f99,f97,f95,f93],alphaO48[f99,f93,f95,f97]\[Rule]alphaO48[f99,f97,f95,f93],alphaO49[f95,f97,f99,f93]\[Rule]alphaO49[f99,f97,f95,f93],alphaO49[f95,f93,f99,f97]\[Rule]alphaO49[f99,f97,f95,f93],alphaO49[f99,f93,f95,f97]\[Rule]alphaO49[f99,f97,f95,f93],alphaO50[f95,f97,f99,f93]\[Rule]alphaO50[f99,f97,f95,f93],alphaO50[f95,f93,f99,f97]\[Rule]alphaO50[f99,f97,f95,f93],alphaO50[f99,f93,f95,f97]\[Rule]alphaO50[f99,f97,f95,f93],alphaO53[f95,f97,f99,f93]\[Rule]alphaO53[f99,f97,f95,f93],alphaO53[f95,f93,f99,f97]\[Rule]alphaO53[f99,f97,f95,f93],alphaO53[f99,f93,f95,f97]\[Rule]alphaO53[f99,f97,f95,f93],alphaO54[f95,f97,f99,f93]\[Rule]alphaO54[f99,f97,f95,f93],alphaO54[f95,f93,f99,f97]\[Rule]alphaO54[f99,f97,f95,f93],alphaO54[f99,f93,f95,f97]\[Rule]alphaO54[f99,f97,f95,f93],alphaO55[f95,f97,f99,f93]\[Rule]alphaO55[f99,f97,f95,f93],alphaO55[f95,f93,f99,f97]\[Rule]alphaO55[f99,f97,f95,f93],alphaO55[f99,f93,f95,f97]\[Rule]alphaO55[f99,f97,f95,f93],alphaF23[f95,f97,f99,f93]\[Rule]alphaF23[f99,f97,f95,f93],alphaF23[f95,f93,f99,f97]\[Rule]alphaF23[f99,f97,f95,f93],alphaF23[f99,f93,f95,f97]\[Rule]alphaF23[f99,f97,f95,f93],alphaF24[f95,f97,f99,f93]\[Rule]alphaF24[f99,f97,f95,f93],alphaF24[f95,f93,f99,f97]\[Rule]alphaF24[f99,f97,f95,f93],alphaF24[f99,f93,f95,f97]\[Rule]alphaF24[f99,f97,f95,f93],alphaF25[f95,f97,f99,f93]\[Rule]alphaF25[f99,f97,f95,f93],alphaF25[f95,f93,f99,f97]\[Rule]alphaF25[f99,f97,f95,f93],alphaF25[f99,f93,f95,f97]\[Rule]alphaF25[f99,f97,f95,f93],alphaF28[f95,f97,f99,f93]\[Rule]alphaF28[f99,f97,f95,f93],alphaF28[f95,f93,f99,f97]\[Rule]alphaF28[f99,f97,f95,f93],alphaF28[f99,f93,f95,f97]\[Rule]alphaF28[f99,f97,f95,f93],alphaF29[f95,f97,f99,f93]\[Rule]alphaF29[f99,f97,f95,f93],alphaF29[f95,f93,f99,f97]\[Rule]alphaF29[f99,f97,f95,f93],alphaF29[f99,f93,f95,f97]\[Rule]alphaF29[f99,f97,f95,f93],alphaE41[f95,f97,f99,f93]\[Rule]alphaE41[f99,f97,f95,f93],alphaE41[f95,f93,f99,f97]\[Rule]alphaE41[f99,f97,f95,f93],alphaE41[f99,f93,f95,f97]\[Rule]alphaE41[f99,f97,f95,f93],alphaE42[f95,f97,f99,f93]\[Rule]alphaE42[f99,f97,f95,f93],alphaE42[f95,f93,f99,f97]\[Rule]alphaE42[f99,f97,f95,f93],alphaE42[f99,f93,f95,f97]\[Rule]alphaE42[f99,f97,f95,f93],alphaE43[f95,f97,f99,f93]\[Rule]alphaE43[f99,f97,f95,f93],alphaE43[f95,f93,f99,f97]\[Rule]alphaE43[f99,f97,f95,f93],alphaE43[f99,f93,f95,f97]\[Rule]alphaE43[f99,f97,f95,f93],alphaE46[f95,f97,f99,f93]\[Rule]alphaE46[f99,f97,f95,f93],alphaE46[f95,f93,f99,f97]\[Rule]alphaE46[f99,f97,f95,f93],alphaE46[f99,f93,f95,f97]\[Rule]alphaE46[f99,f97,f95,f93],alphaE47[f95,f97,f99,f93]\[Rule]alphaE47[f99,f97,f95,f93],alphaE47[f95,f93,f99,f97]\[Rule]alphaE47[f99,f97,f95,f93],alphaE47[f99,f93,f95,f97]\[Rule]alphaE47[f99,f97,f95,f93],alphaE48[f95,f97,f99,f93]\[Rule]alphaE48[f99,f97,f95,f93],alphaE48[f95,f93,f99,f97]\[Rule]alphaE48[f99,f97,f95,f93],alphaE48[f99,f93,f95,f97]\[Rule]alphaE48[f99,f97,f95,f93],alphaE51[f95,f97,f99,f93]\[Rule]alphaE51[f99,f97,f95,f93],alphaE51[f95,f93,f99,f97]\[Rule]alphaE51[f99,f97,f95,f93],alphaE51[f99,f93,f95,f97]\[Rule]alphaE51[f99,f97,f95,f93],alphaE52[f95,f97,f99,f93]\[Rule]alphaE52[f99,f97,f95,f93],alphaE52[f95,f93,f99,f97]\[Rule]alphaE52[f99,f97,f95,f93],alphaE52[f99,f93,f95,f97]\[Rule]alphaE52[f99,f97,f95,f93],alphaE53[f95,f97,f99,f93]\[Rule]alphaE53[f99,f97,f95,f93],alphaE53[f95,f93,f99,f97]\[Rule]alphaE53[f99,f97,f95,f93],alphaE53[f99,f93,f95,f97]\[Rule]alphaE53[f99,f97,f95,f93],alphaE58[f95,f97,f99,f93]\[Rule]alphaE58[f99,f97,f95,f93],alphaE58[f95,f93,f99,f97]\[Rule]alphaE58[f99,f97,f95,f93],alphaE58[f99,f93,f95,f97]\[Rule]alphaE58[f99,f97,f95,f93],alphaE59[f95,f97,f99,f93]\[Rule]alphaE59[f99,f97,f95,f93],alphaE59[f95,f93,f99,f97]\[Rule]alphaE59[f99,f97,f95,f93],alphaE59[f99,f93,f95,f97]\[Rule]alphaE59[f99,f97,f95,f93]};

kinematicdir=<|"L4SM"\[Rule]<|{"B","B"}\[Rule]{{p2.pol1*p2.pol2,{}}},{"G","G"}\[Rule]{{p2.pol1*p2.pol2,{a97\[Rule]1,a99\[Rule]1}}},{"Wi","Wi"}\[Rule]{{p2.pol1*p2.pol2,{n97\[Rule]1,n99\[Rule]1}}},{"dRbar","dR"}\[Rule]{{gam[y99,p2,y97],{m97\[Rule]1,m99\[Rule]1}}},{"uRbar","uR"}\[Rule]{{gam[y99,p2,y97],{m97\[Rule]1,m99\[Rule]1}}},{"lLbar","lL"}\[Rule]{{gam[y99,p2,y97],{l97\[Rule]1,l99\[Rule]1}}},{"lLbar","eR","Phi"}\[Rule]{{gam[y99,y97],{l95\[Rule]1,l99\[Rule]1}}},{"qLbar","dR","Phi"}\[Rule]{{gam[y99,y97],{l95\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}}},{"qLbar","uR","Phibar"}\[Rule]{{gam[y99,y97],{l95\[Rule]1,l99\[Rule]2,m97\[Rule]1,m99\[Rule]1}}},{"qLbar","qL"}\[Rule]{{gam[y99,p2,y97],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}}},{"Phibar","Phi"}\[Rule]{{p2.p2,{l97\[Rule]1,l99\[Rule]1}}},{"Phibar","Phi","Phibar","Phi"}\[Rule]{{1,{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1}}},{"eRbar","eR"}\[Rule]{{gam[y99,p2,y97],{}}}|>,"L6SM_0F"\[Rule]<|{"B","B"}\[Rule]{{(p2.p2)^2*pol1.pol2,{}}},{"G","G","G"}\[Rule]{{p2.pol1*p2.pol2*p2.pol3,{a99\[Rule]1,a97\[Rule]2,a95\[Rule]3}},{p2.pol1*p2.pol3*p3.pol2,{a99\[Rule]1,a97\[Rule]2,a95\[Rule]3}},{p3.p3*ee[p2,pol1,pol2,pol3],{a99\[Rule]1,a97\[Rule]2,a95\[Rule]3}}},{"Wi","Wi","Wi"}\[Rule]{{p2.pol1*p2.pol2*p2.pol3,{n99\[Rule]1,n97\[Rule]2,n95\[Rule]3}},{p2.pol3*p3.pol1*p3.pol2,{n99\[Rule]1,n97\[Rule]2,n95\[Rule]3}},{p3.p3*ee[p2,pol1,pol2,pol3],{n99\[Rule]1,n97\[Rule]2,n95\[Rule]3}}},{"B","Phi","Phibar","Wi"}\[Rule]{{p2.pol1*p4.pol4,{n93\[Rule]1,l95\[Rule]2,l97\[Rule]1}},{p2.p4*pol1.pol4,{n93\[Rule]1,l95\[Rule]2,l97\[Rule]1}},{p3.p3*pol1.pol4,{n93\[Rule]1,l95\[Rule]2,l97\[Rule]1}},{p4.p4*pol1.pol4,{n93\[Rule]1,l95\[Rule]2,l97\[Rule]1}},{ee[p2,p4,pol1,pol4],{n93\[Rule]1,l95\[Rule]2,l97\[Rule]1}}},{"G","G","Phi","Phibar"}\[Rule]{{p2.pol1*p2.pol2,{a97\[Rule]1,a99\[Rule]1,l93\[Rule]1,l95\[Rule]1}},{ee[p2,p3,pol1,pol2],{a97\[Rule]1,a99\[Rule]1,l93\[Rule]1,l95\[Rule]1}}},{"Phi","Phi","Phibar","Phibar"}\[Rule]{{p2.p2,{l93\[Rule]1,l99\[Rule]1,l95\[Rule]2,l97\[Rule]2}},{p2.p3,{l93\[Rule]1,l99\[Rule]1,l95\[Rule]2,l97\[Rule]2}},{p3.p4,{l93\[Rule]1,l99\[Rule]1,l95\[Rule]2,l97\[Rule]2}},{p4.p4,{l93\[Rule]1,l99\[Rule]1,l95\[Rule]2,l97\[Rule]2}}},{"Phi","Phibar","Wi","Wi"}\[Rule]{{p3.pol4*p4.pol3,{l99\[Rule]1,l97\[Rule]1,n93\[Rule]1,n95\[Rule]1}},{p2.pol3*p2.pol4,{l99\[Rule]1,l97\[Rule]1,n93\[Rule]1,n95\[Rule]1}},{ee[p3,p4,pol3,pol4],{l99\[Rule]1,l97\[Rule]1,n93\[Rule]1,n95\[Rule]1}},{p2.pol3*p4.pol4,{l99\[Rule]2,l97\[Rule]2,n93\[Rule]2,n95\[Rule]1}}},{"Phibar","Phi","B","B"}\[Rule]{{p2.pol3*p2.pol4,{l97\[Rule]1,l99\[Rule]1}},{p3.pol4*p4.pol3,{l97\[Rule]1,l99\[Rule]1}},{ee[p3,p4,pol3,pol4],{l97\[Rule]1,l99\[Rule]1}},{p3.pol3*p3.pol4,{l97\[Rule]1,l99\[Rule]1}}}|>,"L6SM_2F_0S_3D"\[Rule]<|{"dRbar","dR","B"}\[Rule]{{p2.pol3*gam[y99,p2,y97],{m97\[Rule]1,m99\[Rule]1}},{p2.pol3*gam[y99,p3,y97],{m97\[Rule]1,m99\[Rule]1}},{p3.pol3*gam[y99,FIVE,p2,y97],{m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,p2,p3,pol3]*gam[y99,mimu1,y97],{m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p2,y97],{m97\[Rule]1,m99\[Rule]1}},{p3.pol3*gam[y99,p3,y97],{m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,FIVE,mimu1,mimu2,p3,y97],{m97\[Rule]1,m99\[Rule]1}}},{"dRbar","dR","G"}\[Rule]{{ee[mimu1,p2,p3,pol3]*gam[y99,mimu1,y97],{a95\[Rule]1,m99\[Rule]1,m97\[Rule]2}},{p2.pol3*gam[y99,p2,y97],{a95\[Rule]1,m99\[Rule]1,m97\[Rule]2}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p2,y97],{a95\[Rule]1,m99\[Rule]1,m97\[Rule]2}},{p2.pol3*gam[y99,p3,y97],{a95\[Rule]1,m99\[Rule]1,m97\[Rule]2}},{p3.p3*gam[y99,pol3,y97],{a95\[Rule]1,m99\[Rule]1,m97\[Rule]2}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p3,y97],{a95\[Rule]1,m99\[Rule]1,m97\[Rule]2}}},{"eRbar","eR","B"}\[Rule]{{ee[mimu1,p2,p3,pol3]*gam[y99,mimu1,y97],{}},{p2.pol3*gam[y99,p2,y97],{}},{p3.pol3*gam[y99,p2,y97],{}},{p2.pol3*gam[y99,p3,y97],{}},{p3.pol3*gam[y99,p3,y97],{}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p2,y97],{}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,FIVE,mimu1,mimu2,p3,y97],{}}},{"lLbar","lL","B"}\[Rule]{{ee[mimu1,p2,p3,pol3]*gam[y99,mimu1,y97],{l97\[Rule]1,l99\[Rule]1}},{p2.pol3*gam[y99,p2,y97],{l97\[Rule]1,l99\[Rule]1}},{p2.pol3*gam[y99,p3,y97],{l97\[Rule]1,l99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p2,y97],{l97\[Rule]1,l99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,FIVE,mimu1,mimu2,p3,y97],{l97\[Rule]1,l99\[Rule]1}},{p3.pol3*gam[y99,p2,y97],{l97\[Rule]1,l99\[Rule]1}},{p3.pol3*gam[y99,p3,y97],{l97\[Rule]1,l99\[Rule]1}}},{"lLbar","lL","Wi"}\[Rule]{{ee[mimu1,p2,p3,pol3]*gam[y99,mimu1,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1}},{p2.pol3*gam[y99,p2,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1}},{p2.pol3*gam[y99,p3,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1}},{p3.pol3*gam[y99,p2,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1}},{p3.pol3*gam[y99,p3,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,FIVE,mimu1,mimu2,p3,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p2,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1}}},{"qLbar","qL","B"}\[Rule]{{ee[mimu1,p2,p3,pol3]*gam[y99,mimu1,y97],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p2.pol3*gam[y99,p2,y97],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p2.pol3*gam[y99,p3,y97],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p3.pol3*gam[y99,p2,y97],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p2,y97],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p3.pol3*gam[y99,p3,y97],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,FIVE,mimu1,mimu2,p3,y97],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}}},{"qLbar","qL","G"}\[Rule]{{ee[mimu1,p2,p3,pol3]*gam[y99,mimu1,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l97\[Rule]1,l99\[Rule]1}},{p2.pol3*gam[y99,p2,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l97\[Rule]1,l99\[Rule]1}},{p2.pol3*gam[y99,p3,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l97\[Rule]1,l99\[Rule]1}},{p3.pol3*gam[y99,p2,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l97\[Rule]1,l99\[Rule]1}},{p3.p3*gam[y99,pol3,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l97\[Rule]1,l99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p2,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l97\[Rule]1,l99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p3,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l97\[Rule]1,l99\[Rule]1}}},{"qLbar","qL","Wi"}\[Rule]{{ee[mimu1,p2,p3,pol3]*gam[y99,mimu1,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p2.pol3*gam[y99,p2,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p2.pol3*gam[y99,p3,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p3.pol3*gam[y99,p2,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p3.pol3*gam[y99,p3,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p2,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,FIVE,mimu1,mimu2,p3,y97],{n95\[Rule]3,l99\[Rule]1,l97\[Rule]1,m97\[Rule]1,m99\[Rule]1}}},{"uRbar","uR","B"}\[Rule]{{ee[mimu1,p2,p3,pol3]*gam[y99,mimu1,y97],{m97\[Rule]1,m99\[Rule]1}},{p2.pol3*gam[y99,p2,y97],{m97\[Rule]1,m99\[Rule]1}},{p2.pol3*gam[y99,p3,y97],{m97\[Rule]1,m99\[Rule]1}},{p3.pol3*gam[y99,p2,y97],{m97\[Rule]1,m99\[Rule]1}},{p3.pol3*gam[y99,p3,y97],{m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p2,y97],{m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,FIVE,mimu1,mimu2,p3,y97],{m97\[Rule]1,m99\[Rule]1}}},{"uRbar","uR","G"}\[Rule]{{ee[mimu1,p2,p3,pol3]*gam[y99,mimu1,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3}},{p2.pol3*gam[y99,p2,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3}},{p3.pol3*gam[y99,p2,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3}},{p2.pol3*gam[y99,p3,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3}},{p3.p3*gam[y99,pol3,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,FIVE,mimu1,mimu2,p2,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,p3,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3}}}|>,"L6SM_2F_1S_2D"\[Rule]<|{"lLbar","eR","B","Phi"}\[Rule]{{gam[y99,FIVE,p2,pol3,y97],{l93\[Rule]1,l99\[Rule]1}},{gam[y99,FIVE,p3,pol3,y97],{l93\[Rule]1,l99\[Rule]1}},{p2.pol3*gam[y99,y97],{l93\[Rule]1,l99\[Rule]1}},{p3.pol3*gam[y99,y97],{l93\[Rule]1,l99\[Rule]1}},{p4.pol3*gam[y99,y97],{l93\[Rule]1,l99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,y97],{l93\[Rule]1,l99\[Rule]1}},{ee[mimu1,mimu2,p2,pol3]*gam[y99,mimu1,mimu2,y97],{l93\[Rule]1,l99\[Rule]1}}},{"lLbar","eR","Wi","Phi"}\[Rule]{{p4.pol3*gam[y99,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1}},{p3.pol3*gam[y99,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1}},{gam[y99,p2,pol3,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1}},{p2.pol3*gam[y99,FIVE,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1}},{ee[mimu1,mimu2,p2,pol3]*gam[y99,mimu1,mimu2,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1}}},{"qLbar","dR","B","Phi"}\[Rule]{{gam[y99,p3,pol3,y97],{l93\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,FIVE,p2,pol3,y97],{l93\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,y97],{l93\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p2,pol3]*gam[y99,mimu1,mimu2,y97],{l93\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p2.pol3*gam[y99,y97],{l93\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p3.pol3*gam[y99,y97],{l93\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p4.pol3*gam[y99,y97],{l93\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}}},{"qLbar","dR","G","Phi"}\[Rule]{{p2.pol3*gam[y99,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l99\[Rule]1}},{ee[mimu1,mimu2,p4,pol3]*gam[y99,mimu1,mimu2,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l99\[Rule]1}},{gam[y99,p3,pol3,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l99\[Rule]1}},{gam[y99,p4,pol3,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l99\[Rule]1}},{p4.pol3*gam[y99,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l99\[Rule]1}}},{"qLbar","dR","Wi","Phi"}\[Rule]{{p4.pol3*gam[y99,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p2,pol3]*gam[y99,mimu1,mimu2,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p2,pol3,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p3,pol3,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p2.pol3*gam[y99,y97],{n95\[Rule]3,l99\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}}},{"qLbar","uR","B","Phibar"}\[Rule]{{ee[mimu1,mimu2,p2,pol3]*gam[y99,mimu1,mimu2,y97],{m97\[Rule]1,m99\[Rule]1,l93\[Rule]1,l99\[Rule]2}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,y97],{m97\[Rule]1,m99\[Rule]1,l93\[Rule]1,l99\[Rule]2}},{gam[y99,p2,pol3,y97],{m97\[Rule]1,m99\[Rule]1,l93\[Rule]1,l99\[Rule]2}},{gam[y99,p3,pol3,y97],{m97\[Rule]1,m99\[Rule]1,l93\[Rule]1,l99\[Rule]2}},{p2.pol3*gam[y99,y97],{m97\[Rule]1,m99\[Rule]1,l93\[Rule]1,l99\[Rule]2}},{p3.pol3*gam[y99,y97],{m97\[Rule]1,m99\[Rule]1,l93\[Rule]1,l99\[Rule]2}},{p4.pol3*gam[y99,y97],{m97\[Rule]1,m99\[Rule]1,l93\[Rule]1,l99\[Rule]2}}},{"qLbar","uR","G","Phibar"}\[Rule]{{p2.pol3*gam[y99,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l97\[Rule]2}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l97\[Rule]2}},{ee[mimu1,mimu2,p4,pol3]*gam[y99,mimu1,mimu2,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l97\[Rule]2}},{gam[y99,p3,pol3,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l97\[Rule]2}},{gam[y99,p4,pol3,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l97\[Rule]2}},{p4.pol3*gam[y99,FIVE,y97],{a95\[Rule]8,m99\[Rule]3,m97\[Rule]3,l93\[Rule]1,l97\[Rule]2}}},{"qLbar","uR","Wi","Phibar"}\[Rule]{{gam[y99,p2,pol3,y97],{l99\[Rule]1,n95\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p3,pol3,y97],{l99\[Rule]1,n95\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p4.pol3*gam[y99,y97],{l99\[Rule]1,n95\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p2,pol3]*gam[y99,mimu1,mimu2,y97],{l99\[Rule]1,n95\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{ee[mimu1,mimu2,p3,pol3]*gam[y99,mimu1,mimu2,y97],{l99\[Rule]1,n95\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{p2.pol3*gam[y99,y97],{l99\[Rule]1,n95\[Rule]1,l93\[Rule]1,m97\[Rule]1,m99\[Rule]1}}}|>,"L6SM_2F_2S_1D"\[Rule]<|{"dRbar","dR","Phibar","Phi"}\[Rule]{{gam[y99,p2,y97],{l93\[Rule]1,l95\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p3,y97],{l93\[Rule]1,l95\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p4,y97],{l93\[Rule]1,l95\[Rule]1,m97\[Rule]1,m99\[Rule]1}}},{"eRbar","eR","Phibar","Phi"}\[Rule]{{gam[y99,p2,y97],{l93\[Rule]1,l95\[Rule]1}},{gam[y99,p3,y97],{l93\[Rule]1,l95\[Rule]1}},{gam[y99,p4,y97],{l93\[Rule]1,l95\[Rule]1}}},{"lLbar","lL","Phibar","Phi"}\[Rule]{{gam[y99,p2,y97],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1}},{gam[y99,p2,y97],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]1,l99\[Rule]1}},{gam[y99,p3,y97],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1}},{gam[y99,p3,y97],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]1,l99\[Rule]1}},{gam[y99,p4,y97],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1}},{gam[y99,p4,y97],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]1,l99\[Rule]1}}},{"qLbar","qL","Phibar","Phi"}\[Rule]{{gam[y99,p2,y97],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p2,y97],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p3,y97],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p3,y97],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p4,y97],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p4,y97],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}}},{"uRbar","uR","Phibar","Phi"}\[Rule]{{gam[y99,p2,y97],{l93\[Rule]1,l95\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p3,y97],{l93\[Rule]1,l95\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y99,p4,y97],{l93\[Rule]1,l95\[Rule]1,m97\[Rule]1,m99\[Rule]1}}}|>,"L6SM_2F_3S_0D"\[Rule]<|{"lLbar","eR","Phibar","Phi","Phi"}\[Rule]{{gam[y99,y97],{l91\[Rule]1,l99\[Rule]1,l93\[Rule]2,l95\[Rule]2}}},{"qLbar","dR","Phibar","Phi","Phi"}\[Rule]{{gam[y99,y97],{l91\[Rule]1,l99\[Rule]1,l93\[Rule]2,l95\[Rule]2,m97\[Rule]1,m99\[Rule]1}}},{"qLbar","uR","Phibar","Phibar","Phi"}\[Rule]{{gam[y99,y97],{l91\[Rule]1,l99\[Rule]2,l93\[Rule]1,l95\[Rule]1,m97\[Rule]1,m99\[Rule]1}}}|>,"L6SM_4F_LLLL"\[Rule]<|{"lLbar","lL","lLbar","lL"}\[Rule]{{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1}},{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]2,l99\[Rule]2}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]2,l99\[Rule]2}}},{"lLbar","lL","qLbar","qL"}\[Rule]{{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]2,l99\[Rule]2,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]2,l99\[Rule]2,m93\[Rule]1,m95\[Rule]1}}},{"qLbar","qL","qLbar","qL"}\[Rule]{{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]2,l99\[Rule]2,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]2,l99\[Rule]2,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{l93\[Rule]1,l95\[Rule]2,l97\[Rule]2,l99\[Rule]1,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}},{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]2,l99\[Rule]2,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{l93\[Rule]1,l95\[Rule]1,l97\[Rule]2,l99\[Rule]2,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}}}|>,"L6SM_4F_LLRR_LRRL"\[Rule]<|{"lLbar","lL","dRbar","dR"}\[Rule]{{gam[y95,y97]*gam[y99,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}}},{"lLbar","lL","uRbar","uR"}\[Rule]{{gam[y95,y97]*gam[y99,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}}},{"lLbar","lL","eRbar","eR"}\[Rule]{{gam[y95,y97]*gam[y99,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1}}},{"lLbar","qL","dRbar","eR"}\[Rule]{{gam[y95,y97]*gam[y99,y93],{l97\[Rule]1,l99\[Rule]1,m99\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{l97\[Rule]1,l99\[Rule]1,m99\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{l97\[Rule]1,l99\[Rule]1,m99\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{l97\[Rule]1,l99\[Rule]1,m99\[Rule]1,m95\[Rule]1}}},{"qLbar","qL","dRbar","dR"}\[Rule]{{gam[y95,y97]*gam[y99,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,y97]*gam[y99,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}}},{"qLbar","qL","uRbar","uR"}\[Rule]{{gam[y95,y97]*gam[y99,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,y97]*gam[y99,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{l97\[Rule]1,l99\[Rule]1,m93\[Rule]1,m95\[Rule]2,m97\[Rule]2,m99\[Rule]1}}},{"qLbar","qL","eRbar","eR"}\[Rule]{{gam[y95,y97]*gam[y99,y93],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{l97\[Rule]1,l99\[Rule]1,m97\[Rule]1,m99\[Rule]1}}}|>,"L6SM_4F_LRLR"\[Rule]<|{"lLbar","eR","qLbar","uR"}\[Rule]{{gam[y95,y97]*gam[y99,y93],{m93\[Rule]1,m95\[Rule]1,l95\[Rule]1,l99\[Rule]2}},{gam[y95,y93]*gam[y99,y97],{m93\[Rule]1,m95\[Rule]1,l95\[Rule]1,l99\[Rule]2}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{m93\[Rule]1,m95\[Rule]1,l95\[Rule]1,l99\[Rule]2}},{gam[y95,mimu1,mimu2,y93]*gam[y99,mimu1,mimu2,y97],{m93\[Rule]1,m95\[Rule]1,l95\[Rule]1,l99\[Rule]2}}},{"qLbar","uR","qLbar","dR"}\[Rule]{{gam[y95,y97]*gam[y99,y93],{l95\[Rule]1,l99\[Rule]2,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,y97]*gam[y99,y93],{l95\[Rule]1,l99\[Rule]2,m93\[Rule]1,m95\[Rule]1,m97\[Rule]1,m99\[Rule]1}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{l95\[Rule]1,l99\[Rule]2,m93\[Rule]1,m95\[Rule]1,m97\[Rule]2,m99\[Rule]2}},{gam[y95,mimu1,mimu2,y97]*gam[y99,mimu1,mimu2,y93],{l95\[Rule]1,l99\[Rule]2,m93\[Rule]1,m95\[Rule]1,m97\[Rule]1,m99\[Rule]1}}}|>,"L6SM_4F_RRRR"\[Rule]<|{"dRbar","dR","dRbar","dR"}\[Rule]{{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{m97\[Rule]1,m99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{m97\[Rule]1,m99\[Rule]2,m93\[Rule]2,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{m97\[Rule]1,m99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{m97\[Rule]1,m99\[Rule]2,m93\[Rule]2,m95\[Rule]1}}},{"dRbar","dR","eRbar","eR"}\[Rule]{{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{m97\[Rule]1,m99\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{m97\[Rule]1,m99\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{m97\[Rule]1,m99\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{m97\[Rule]1,m99\[Rule]1}}},{"eRbar","eR","eRbar","eR"}\[Rule]{{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{m97\[Rule]1,m99\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{m97\[Rule]1,m99\[Rule]1}}},{"uRbar","uR","dRbar","dR"}\[Rule]{{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{m97\[Rule]1,m99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{m97\[Rule]1,m99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{m97\[Rule]1,m99\[Rule]2,m93\[Rule]2,m95\[Rule]1}},{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{m97\[Rule]1,m99\[Rule]2,m93\[Rule]2,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{m97\[Rule]1,m99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{m97\[Rule]1,m99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{m97\[Rule]1,m99\[Rule]2,m93\[Rule]2,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{m97\[Rule]1,m99\[Rule]2,m93\[Rule]2,m95\[Rule]1}}},{"uRbar","uR","eRbar","eR"}\[Rule]{{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{m97\[Rule]1,m99\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{m97\[Rule]1,m99\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{m97\[Rule]1,m99\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{m97\[Rule]1,m99\[Rule]1}}},{"uRbar","uR","uRbar","uR"}\[Rule]{{gam[y95,mimu1,y97]*gam[y99,mimu1,y93],{m97\[Rule]1,m99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,y93]*gam[y99,mimu1,y97],{m97\[Rule]1,m99\[Rule]2,m93\[Rule]2,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y97]*gam[y99,mimu1,mimu2,mimu3,y93],{m97\[Rule]1,m99\[Rule]1,m93\[Rule]1,m95\[Rule]1}},{gam[y95,mimu1,mimu2,mimu3,y93]*gam[y99,mimu1,mimu2,mimu3,y97],{m97\[Rule]1,m99\[Rule]2,m93\[Rule]2,m95\[Rule]1}}}|>|>;*)

$effdiranddimlist={{"L2SM",2},{"L4SM",4},{"L6SM_0F",6},{"L6SM_2F_0S_3D",6},{"L6SM_2F_1S_2D",6},{"L6SM_2F_2S_1D",6},{"L6SM_2F_3S_0D",6},{"L6SM_4F_LLLL",6},{"L6SM_4F_LLRR_LRRL",6},{"L6SM_4F_LRLR",6},{"L6SM_4F_RRRR",6}};

(* We consider up to dimension 6  *)
plist0={Global`p1,Global`p2,Global`p3,Global`p4,Global`p5,Global`p6};
miflis={Global`mif1,Global`mif2,Global`mif3,Global`mif4,Global`mif5,Global`mif6,Global`mif7,Global`mif8,Global`mif9,Global`mif10,Global`mif11,Global`mif12,Global`mif13,Global`mif14,Global`mif15,Global`mif16,Global`mif17,Global`mif18,Global`mif19,Global`mif20,Global`mif21,Global`mif22,Global`mif23,Global`mif24,Global`mif25,Global`mif26,Global`mif27,Global`mif28,Global`mif29,Global`mif30};
mimulis={Global`mimu1,Global`mimu2,Global`mimu3,Global`mimu4,Global`mimu5,Global`mimu6,Global`mimu7,Global`mimu8,Global`mimu9,Global`mimu10};
miMulis={Global`miMu1,Global`miMu2,Global`miMu3,Global`miMu4,Global`miMu5,Global`miMu6,Global`miMu7,Global`miMu8,Global`miMu9,Global`miMu10};
dummylorentz={Global`mumualpha,Global`mumubeta,Global`mumugamma,Global`mumudelta,Global`mumucurlyepsilon,Global`mumuzeta,Global`mumueta,Global`mumutheta,Global`mumuiota,Global`mumukappa,Global`mumulambda,Global`mumumu,Global`mumunu,Global`mumuxi,Global`mumuomicron,Global`mumupi,Global`mumurho,Global`mumufinalsigma,Global`mumusigma,Global`mumutau,Global`mumuupsilon,Global`mumucurlyphi,Global`mumuchi,Global`mumupsi,Global`mumuomega,Global`mu,Global`mumuminus,Global`mimu,Global`mugam};

(* We define the list of light fermions, quarks, scalars and vectors from the effective lagrangian in effdiranddimlist *)
Do[If[Length[FileNames[Global`$matchmakerpath<>"models/"<>$effdiranddimlist[[i,1]]<>"/QGRAF/model_data/listlightfermions"]]>0,
lightfermions=Map[StringReplace[# ," "->""]&,Import[FileNames[Global`$matchmakerpath<>"models/"<>$effdiranddimlist[[i,1]]<>"/QGRAF/model_data/listlightfermions"][[1]],"CSV"]][[1]]];
If[Length[FileNames[Global`$matchmakerpath<>"models/"<>$effdiranddimlist[[i,1]]<>"/QGRAF/model_data/listlightquarks"]]>0,
lightquarks=Map[StringReplace[# ," "->""]&,Import[FileNames[Global`$matchmakerpath<>"models/"<>$effdiranddimlist[[i,1]]<>"/QGRAF/model_data/listlightquarks"][[1]],"CSV"]][[1]]];
If[Length[FileNames[Global`$matchmakerpath<>"models/"<>$effdiranddimlist[[i,1]]<>"/QGRAF/model_data/listlightscalars"]]>0,
lightscalars=Map[StringReplace[# ," "->""]&,Import[FileNames[Global`$matchmakerpath<>"models/"<>$effdiranddimlist[[i,1]]<>"/QGRAF/model_data/listlightscalars"][[1]],"CSV"]][[1]]];
If[Length[FileNames[Global`$matchmakerpath<>"models/"<>$effdiranddimlist[[i,1]]<>"/QGRAF/model_data/listlightvectors"]]>0,
lightvectors=Map[StringReplace[# ," "->""]&,Import[FileNames[Global`$matchmakerpath<>"models/"<>$effdiranddimlist[[i,1]]<>"/QGRAF/model_data/listlightvectors"][[1]],"CSV"]][[1]]];
,{i,Length[$effdiranddimlist]}];

GetGaugeData[modelname_]:=StringSplit/@ReadList[Global`$matchmakerpath<>"models/"<>modelname<>"/QGRAF/model_data/gaugedatanew",Record];
GetGaugeIndicesAndRanges[modelname_]:=Block[{data},
data=GetGaugeData[modelname];
Drop[#,2]&/@DeleteCases[data,a_/;Length[a]<4]];
GetGaugeIndices[modelname_]:=Transpose[GetGaugeIndicesAndRanges[modelname]][[1]];

(* FileNameToParticles[filepath] returns a list with the names of the particles the filepath file corresponds to *)
FileNameToParticles[filepath_]:=StringReplace[StringSplit[StringSplit[StringSplit[filepath,"/"][[-1]],"."][[1]],"_"],"bar"->"bar"];


(*GetDictionary[modelname] returns a list of two dictionaries -associations- that return the amplitude that corresponds to each list of particles involved. The first dictionary corresponds to tree level and the second one to one loop. If only tree level results are present then the list is of length one *)
GetDictionary[modelname_,replsym_:{}]:=Block[{lista0,lista1,res0,res1,res},
lista0=FileNames[Global`$matchmakerpath<>"models/"<>modelname<>"/FORM/proc_0loop/*.mat"];
lista1=FileNames[Global`$matchmakerpath<>"models/"<>modelname<>"/FORM/proc_1loop/*.mat"];
res0={};
Do[
Get[lista0[[i]]];
AppendTo[res0,FileNameToParticles[lista0[[i]]]->ToExpression["ampl"<>StringDrop[StringReplace[lista0[[i]],{Global`$matchmakerpath<>"models/"<>modelname<>"/FORM/proc_0loop/"->"","_"->""}],-8]]/.{Global`dotp[a_,b_]->a.b}];
,{i,Length[lista0]}];
res={Association[res0/.replsym]};
If[Length[lista1]>0,
res1={};
Do[
Get[lista1[[i]]];
AppendTo[res1,FileNameToParticles[lista1[[i]]]->ToExpression["ampl"<>StringDrop[StringReplace[lista1[[i]],{Global`$matchmakerpath<>"models/"<>modelname<>"/FORM/proc_1loop/"->"","_"->""}],-8]]/.{Global`dotp[a_,b_]->a.b}];
,{i,Length[lista1]}];
AppendTo[res,Association[res1/.replsym]]];
res
];



(* List2DotProd  takes the list li and returns it as scalar products of the first
[Lentgh[li]/2] pairs *)
List2DotProd[li_]:=Block[{res},
res=1;
Do[res=res*li[[2i-1]].li[[2i]],{i,Length[li]/2}];
res
];

(* CheckIndex *)

CheckIndex[in_,indref_:{}]:=Block[{in0,res,tostring,tostringnonumbers},
If[StringQ[in],in0=in,in0=ToString[InputForm[in]]];
tostring=StringPartition[in0,1];
tostringnonumbers=StringPartition[StringDelete[in0,ToString/@Range[0,9]],1];
If[Length[indref]>0,
res=Length[tostring]>Length[tostringnonumbers]&&(MemberQ[ToString/@indref,StringJoin[tostringnonumbers]]||MemberQ[ToString/@indref,StringDelete[StringJoin[tostringnonumbers],"minus"]]),res=Length[tostring]>Length[tostringnonumbers]];
res
];


(* IndexType *)

IndexType[in_]:=Block[{res,tostring,tostringnonumbers},
tostring=StringPartition[ToString[in],1];
tostringnonumbers=DeleteCases[tostring,a_/;NumericQ[ToExpression[a]]];
ToExpression[StringDelete[StringJoin[tostringnonumbers],"minus"]]
];

(* OrderedGamNonStripped[a] takes the arguments of a gamma function as a list as input and returns
the result of applying one anticommutation of the gamma matrices towards standard ordering,
taking into account that the first and last arguments are not to be reordered, as they do not
correspond to gamma matrices;

Uses List2DotProd;  *)

OrderedGamNonStripped[a___]:=Block[{res,lista,listatemp},
lista=Table[a[[i]],{i,Length[a]}];
res=a;
Do[
If[ToString[lista[[j]]]==ToString[lista[[j+1]]],
res=List2DotProd[Sort[{lista[[j]],lista[[j+1]]}]]Apply[Global`gam,Drop[lista,{j,j+1}]];Break[],
If[ToString[Sort[Take[lista,{j,j+1}]]]!=ToString[Take[lista,{j,j+1}]],
res=-Apply[Global`gam,Join[Take[lista,j-1],{lista[[j+1]],lista[[j]]},Take[lista,{j+2,Length[lista]}]]]+2List2DotProd[Sort[{lista[[j]],lista[[j+1]]}]]Apply[Global`gam,Drop[lista,{j,j+1}]];Break[]]];
,{j,2,Length[lista]-2}];
res];


(* GetIndices; Uses Splitter, CheckIndex; *)

GetIndices[exp_,indref_:{}]:=Block[{mons,int,ext,monshere,iii,allindices,counts},
mons=Splitter[exp];
int={};
ext={};
Do[
allindices=Cases[StringSplit[StringReplace[StringRiffle[StringCases[ToString[InputForm[mons[[iii]]/.Power[a_[c___],2]:>Dot@@Table[a[c],2]]],"["~~s:Except["["|"]"]...~~"]":>s],","]," "->""],","],b_/;CheckIndex[b,indref]];
(*Print["allinds=",allindices];*)
counts=Counts[allindices];
If[MemberQ[Values[counts],1],AppendTo[ext,PositionIndex[counts][1]]];
If[MemberQ[Values[counts],2],AppendTo[int,PositionIndex[counts][2]]];
,{iii,Length[mons]}];
{DeleteDuplicates[Flatten[int]],DeleteDuplicates[Flatten[ext]]}];


(*

SumIndices2;

Uses: GetIndices, Splitter, EliminatParenthesisInAlphas,IndexType;

*)

SumIndices2[exp_,indr0_]:=Block[{dims,indr,allint,allext,suma,indref0,indref,i,res},
indref0=Transpose[indr0][[1]];
indref=Join[indref0,StringJoin["mi",#]&/@indref0];
indr=Transpose[{indref,Join[Transpose[indr0][[2]],Transpose[indr0][[2]]]}];
dims=Association[Table[ToExpression[indr[[i,1]]]->ToExpression[indr[[i,2]]],{i,Length[indr]}]];
allint=Union[Flatten[Transpose[GetIndices[#,indref]&/@Splitter[exp]][[1]]]];
allext=Union[Flatten[Transpose[GetIndices[#,indref]&/@Splitter[exp]][[2]]]];
(*Print["exp=",exp];
Print["allint=",allint];
Print["allext=",allext];*)
suma=EliminatParenthesisInAlphas[exp];
If[Length[allint]>0,suma=Sum@@Join[{EliminatParenthesisInAlphas[exp]},Evaluate[Transpose[{ToExpression/@allint,dims/@IndexType/@allint}]]];];
(*res=(suma/.{Global`dd[a_,b_]:>KroneckerDelta[a,b],Global`ee[a_,b_]:>Signature[{a,b}]})//Simplify;*)
res=(suma/.{Global`dd[a_,b_]:>KroneckerDelta[a,b],Global`ee[a_,b_]:>LeviCivitaTensor[2][[a,b]]})//Simplify;
(*Print["exp=",exp];
Print["allint=",allint];
Print["allext=",allext];
Print["suma=",res,"\n"];*)
res
];


SumExpandIndices2[exp_,indr0_]:=Block[{dims,indr,allint,allext,suma,indref0,indref,i,res,expand},
indref0=Transpose[indr0][[1]];
indref=Join[indref0,StringJoin["mi",#]&/@indref0];
indr=Transpose[{indref,Join[Transpose[indr0][[2]],Transpose[indr0][[2]]]}];
dims=Association[Table[ToExpression[indr[[i,1]]]->ToExpression[indr[[i,2]]],{i,Length[indr]}]];
allint=Union[Flatten[Transpose[GetIndices[#,indref]&/@Splitter[exp]][[1]]]];
allext=Union[Flatten[Transpose[GetIndices[#,indref]&/@Splitter[exp]][[2]]]];
suma=EliminatParenthesisInAlphas[exp];
If[Length[allint]>0,suma=Sum@@Join[{EliminatParenthesisInAlphas[exp]},Evaluate[Transpose[{ToExpression/@allint,dims/@IndexType/@allint}]]];];
(*res=(suma/.{Global`dd[a_,b_]:>KroneckerDelta[a,b],Global`ee[a_,b_]:>Signature[{a,b}]})//Simplify;*)
expand=TreatDummyFlavorGeneral[(suma/.{Global`dd[a_,b_]:>KroneckerDelta[a,b],Global`ee[a_,b_]:>LeviCivitaTensor[2][[a,b]]})//Simplify,{"f","mif"}];
res=expand;
If[Length[allext]>0,res=Table@@Join[{EliminatParenthesisInAlphas[expand]},Evaluate[Transpose[{ToExpression/@allext,dims/@IndexType/@allext}]]];];
(*Print["exp=",exp];
Print["allint=",allint];
Print["allext=",allext];
Print["suma=",res,"\n"];*)
res
];


SumExpandIndicesFast2[exp_,indr0_]:=Block[{dims,indr,allint,allext,suma,indref0,indref,i,res,expand},
indref0=Transpose[indr0][[1]];
indref=Join[indref0,StringJoin["mi",#]&/@indref0];
indr=Transpose[{indref,Join[Transpose[indr0][[2]],Transpose[indr0][[2]]]}];
dims=Association[Table[ToExpression[indr[[i,1]]]->ToExpression[indr[[i,2]]],{i,Length[indr]}]];
allint=Union[Flatten[Transpose[GetIndices[#,indref]&/@Splitter[exp]][[1]]]];
allext=Union[Flatten[Transpose[GetIndices[#,indref]&/@Splitter[exp]][[2]]]];
suma=EliminatParenthesisInAlphas[exp];
If[Length[allint]>0,suma=Sum@@Join[{EliminatParenthesisInAlphas[exp]},Evaluate[Transpose[{ToExpression/@allint,dims/@IndexType/@allint}]]];];
(*res=(suma/.{Global`dd[a_,b_]:>KroneckerDelta[a,b],Global`ee[a_,b_]:>Signature[{a,b}]})//Simplify;*)
expand=(suma/.{Global`dd[a_,b_]:>KroneckerDelta[a,b],Global`ee[a_,b_]:>LeviCivitaTensor[2][[a,b]]})//Simplify;
res=expand;
If[Length[allext]>0,res=Table@@Join[{EliminatParenthesisInAlphas[expand]},Evaluate[Transpose[{ToExpression/@allext,dims/@IndexType/@allext}]]];];
(*Print["exp=",exp];
Print["allint=",allint];
Print["allext=",allext];
Print["suma=",res,"\n"];*)
res
];


(* Splitter *)
Splitter[exp_]:=Block[{res},
res=DeleteCases[Level[Expand[exp]+"REMOVETHIS",1],"REMOVETHIS"];
res];



(* NewEpsExpansion[x] performs an 1/eps expansion with the following assumptions:
x is of the form x0 * (c0+d0 eps), where x0 is the finite term from a previous eps expansion of the form: a0/eps +(1-Log[])a0 + b0 + O(eps)
so that x0=(1-Log[])a0+b0.
Then NewEpsExpansion[x] returns [(1-Log[])a0+b0]c0+a0 d0
In all cases we have used D=4-2eps
*)
NewEpsExpansion[x_]:=If[NumericQ[x]&&x==0,0,(x/.D->4)-Coefficient[x/.{D->4-2\[Epsilon]}/.Log[a_]->RATATA,\[Epsilon] RATATA]];


(*StandardOrdering[x] returns expression x in which kinematic variables -momenta and polarizations- are returned in alphabetical ordering,
this includes all the relevant signs and new terms generated in the process -for instance when gamma matrices are involved-;

Uses: OrderedGamNonStripped; mimulis *)
(* IMPORTANT: WE SWITCH TO NONSTRIPPED GAMMAS FROM NOW ON                        *)

StandardOrdering[x_]:=Expand[(x/.{(a_).(b_):>Sort[a.b],Global`ee[c___]:>Signature[Global`ee[c]]Sort[Global`ee[c]],Global`dd[c___]:>Sort[Global`dd[c]]}//.Global`gam[a_,b__]:>OrderedGamNonStripped[Global`gam[a,b]])]/.{Global`ee[a___,b_,c___,d_,e___](b_).(d_)->0}/.{(a_/;MemberQ[mimulis,a]).(b_)Global`ee[c___,a_,d___]:>Global`ee[c,b,d]}(*/.{(a_).(b_)Global`ee[c___,a_,d___]\[RuleDelayed]Signature[Global`ee[c,b,d]]Sort[Global`ee[c,b,d]]}*);


(*
TreatDummyLorgentzFast;
Uses: GetIndices, dummylorentz,Splitter,miMulis,mimulis;
*)


TreatDummyLorentzFast[exp_]:=Block[{listexp,res,internallorentz,numl,lista1,lista2},
internallorentz=ToExpression/@GetIndices[exp,dummylorentz][[1]];
(*Print[internallorentz];*)
(*Print[DateString[]," internallorentz=",internallorentz];*)
If[Length[internallorentz]>0,
(*Print["doing dummy lorentz"];*)
listexp=Splitter[exp];
res=0;
Do[
internallorentz=ToExpression/@GetIndices[listexp[[i]],dummylorentz][[1]];
numl=Length[internallorentz];
(*Print["numl=",numl];*)
If[numl>0,
lista1=Table[internallorentz[[jj]]->miMulis[[jj]],{jj,numl}];
lista2=Table[miMulis[[jj]]->mimulis[[jj]],{jj,numl}];
(*Print[lista1,lista2];*)
res=res+(listexp[[i]]/.lista1/.lista2);,
res=res+listexp[[i]];
];
,{i,Length[listexp]}];,
(*Print["not doing dummy lorentz"];*)
res=exp];
(*Simplify[res]*)
res
];


(* MomentumConservation[x,numparts] imposes momentum conservation -writing p1 in terms of all the other momenta- 
in expression x;

Uses plist0;
*)

MomentumConservation[x_,numparts_]:=Block[{plist,res0,res},
plist=Take[plist0,numparts];
res0={(a_).(b_)^n_->(a.b)^n};
res={(a_).plist[[1]]->Sum[-a.plist[[i]],{i,2,Length[plist]}],plist[[1]].(a_)->Sum[-a.plist[[i]],{i,2,Length[plist]}],Global`ee[a___,plist[[1]],b___]->Sum[-Global`ee[a,plist[[i]],b],{i,2,Length[plist]}],Global`gam[a___,plist[[1]],b___]->Sum[-Global`gam[a,plist[[i]],b],{i,2,Length[plist]}]};
x//.res0//.res
];

(* GetsSSOrder[exp,x] gets the coefficient of the term of order sSS^x of exp. For x\[LessEqual]0 we give the result of operators of dimension four or less *)
GetsSSOrder[exp_,x_]:=If[x<=0,exp/.Global`sSS->0,Coefficient[exp,Global`sSS^x]];

(* AssignNumberToScalarsFermionsVectors[str_List,nsfv_List] takes a list of strings str with names of particles and a list of three numbers nsfv such that it assigns to each of the particles in str the corresponding number in nsfv depending on whether they are scalars, fermions or vectors, respectively *)
AssignNumberToScalarsFermionsVectors[str_List,nsfv_List]:=Map[Which[MemberQ[lightscalars,#],nsfv[[1]],MemberQ[lightfermions,#],nsfv[[2]],MemberQ[lightvectors,#],nsfv[[3]]]&,str];

(* GetMassDimensionFromFields[str] takes a list of strings with the names of light particle names and computes the mass dimension corresponding to this set of particles;

Uses AssignNumberToScalarsFermionsVectors;
*)
GetMassDimensionFromFields[str_List]:=Tr[AssignNumberToScalarsFermionsVectors[str,{1,3/2,1}]];


GetAlphas[exp_]:=Union[ToExpression/@DeleteCases[StringSplit[StringReplace[ToString[exp],{"["->" ","("->" ","]"->" ",")"->" ","-"->" "}]],a_/;StringFreeQ[ToString[a],"alpha"]]];

GetAlphasGeneral[exp_,str_]:=Union[ToExpression/@DeleteCases[StringSplit[StringReplace[ToString[exp],{"["->" ","("->" ","]"->" ",")"->" ","-"->" "}]],a_/;StringFreeQ[ToString[a],str]]];

(* 
EliminatParenthesisInAlphas;
Uses;
GetAlphas;
*)

EliminatParenthesisInAlphas[exp_]:=Block[{exp2,allist},
allist=GetAlphas[exp];
exp2=exp;
Do[
exp2=exp2/.ToExpression[allist[[i]]][a_,b_]:>ToExpression[StringReplace[ToString[allist[[i]][a,b]],{"["->"","]"->"",","->""," "->""}]];
exp2=exp2/.ToExpression[allist[[i]]][a_,b_,c_,d_]:>ToExpression[StringReplace[ToString[allist[[i]][a,b,c,d]],{"["->"","]"->"",","->""," "->""}]];
,{i,Length[allist]}];
exp2
];

EliminatParenthesisInAlphasGeneral[exp_,str_]:=Block[{exp2,allist},
allist=GetAlphasGeneral[exp,str];
exp2=exp;
Do[
exp2=exp2/.ToExpression[allist[[i]]][a_,b_]:>ToExpression[StringReplace[ToString[allist[[i]][a,b]],{"["->"","]"->"",","->""," "->""}]];
exp2=exp2/.ToExpression[allist[[i]]][a_,b_,c_,d_]:>ToExpression[StringReplace[ToString[allist[[i]][a,b,c,d]],{"["->"","]"->"",","->""," "->""}]];
,{i,Length[allist]}];
exp2
];

(* 
TreatDummyFlavor;
Uses;
Splitter;
GetIndices;
miflis;
*)

TreatDummyFlavor[exp_]:=Block[{listexp,res,internalflavor,numf},
listexp=Splitter[exp];
res=0;
Do[
internalflavor=ToExpression/@GetIndices[listexp[[i]],{"f"}][[1]];
numf=Length[internalflavor];
If[numf>0,
res=res+(listexp[[i]]/.Table[internalflavor[[jj]]->miflis[[jj]],{jj,numf}]);,
res=res+listexp[[i]];
];
,{i,Length[listexp]}];
Simplify[res]
];

TreatDummyFlavorGeneral[exp_,lis_:{"f"}]:=Block[{listexp,res,internalflavor,externalflavor,miflisnoexternal,numf},
listexp=Splitter[exp];
res=0;
Do[
(*Print["allin=",GetIndices[listexp[[i]],lis]];*)
internalflavor=ToExpression/@GetIndices[listexp[[i]],lis][[1]];
externalflavor=ToExpression/@GetIndices[listexp[[i]],lis][[2]];
miflisnoexternal=Select[miflis,!MemberQ[externalflavor,#]&];
(*Print["int=",internalflavor];
Print["ext=",externalflavor];
Print["mifnoext=",miflisnoexternal];*)
numf=Length[internalflavor];
If[numf>0,
res=res+(listexp[[i]]/.Table[internalflavor[[jj]]->miflisnoexternal[[jj]],{jj,numf}]);,
res=res+listexp[[i]];
];
,{i,Length[listexp]}];
Simplify[res]
];

(*
SumIndicesEfficient2;
Uses;
Splitter;
SumIndices2;
*)

(*DistributeDefinitions[SumIndices2];
SumIndicesEfficient2[exp_,indr_]:=Block[{expi,iii,res},
expi=Splitter[exp];
(*Print[expi];*)
res=Tr[Parallelize[Map[SumIndices2[#,indr]&,expi]]];
If[ListQ[res],
Union[Simplify[Flatten[res]]],res]
];
*)

SumIndicesEfficient2[exp_,indr_,runogaugex_]:=Block[{expi,iii,res},
expi=Splitter[exp];
(*Print[expi];*)
(*res=Sum[SumIndices2[expi[[iii]],indr],{iii,Length[expi]}];*)
res=Sum[
expi0=(expi[[iii]]/.runogaugex);
ru0={coeff->expi0};
ru1={expi0->coeff};
SumIndices2[(expi[[iii]]/.ru1)/.Global`replacegaugedata,indr]/.ru0,{iii,Length[expi]}];
(*res=Tr[Map[SumIndices2[#,indr]&,expi]];*)
If[ListQ[res],
Union[Simplify[Flatten[res]]],res]
];


SumExpandIndicesEfficient2[exp_,indr_,runogaugex_]:=Module[{expi,expi0,iii,res,ru0,ru1},
expi=Splitter[exp];
res=Sum[
expi0=(expi[[iii]]/.runogaugex);
ru0={coeff->expi0};
ru1={expi0->coeff};
SumExpandIndicesFast2[(expi[[iii]]/.ru1)/.Global`replacegaugedata,indr]/.ru0,{iii,Length[expi]}];
(*Print["res=",res];*)
(*Print[expi];*)
(*res=Sum[SumExpandIndices2[expi[[iii]],indr],{iii,Length[expi]}];*)
(*res=Sum[SumExpandIndicesFast2[expi[[iii]],indr],{iii,Length[expi]}];*)
(*res=Total[Map[SumExpandIndicesFast2[#,indr]&,expi]];*)
If[ListQ[res],
Union[Simplify[Flatten[res]]],res]
];

(*

SumIndicesEfficient2[exp_,indr_]:=Block[{expi,iii,res},
expi=Splitter[exp];
(*Print[expi];*)
(*res=Sum[SumIndices2[expi[[iii]],indr],{iii,Length[expi]}];*)
res=Tr[Map[SumIndices2[#,indr]&,expi]];
If[ListQ[res],
Union[Simplify[Flatten[res]]],res]
];


SumExpandIndicesEfficient2[exp_,indr_]:=Block[{expi,iii,res},
expi=Splitter[exp];
(*Print[expi];*)
(*res=Sum[SumExpandIndices2[expi[[iii]],indr],{iii,Length[expi]}];*)
(*res=Sum[SumExpandIndicesFast2[expi[[iii]],indr],{iii,Length[expi]}];*)
res=Total[Map[SumExpandIndicesFast2[#,indr]&,expi]];
If[ListQ[res],
(*Print["res=",res];
If[Length[res]>0,*)
Union[Simplify[Flatten[res]]],res]
];

*)
(* ManipulateSingleAmplitudeOriginalFast2;

Uses;
GetMassDimensionFromFields;
GetsSSOrder;
MomentumConservation;
TreatDummyLorentzFast;
StandardOrdering;
NewEpsExpansion;

*)


TreatDummy[lista_List,massdim_]:=Block[{kin,sus0,resp},
kin=Union[KinematicsGeneral[lista,massdim]];
sus0=Table[mimulis[[i]]->milis[[i]],{i,Length[milis]}];
resp=Table[(kin[[i]]/.sus0)->kin[[i]],{i,Length[kin]}];
resp
];

ManipulateSingleAmplitudeOriginalFast2[lista_List,amp_,opdimx_,indlist_]:=Block[{},
NewEpsExpansion[Expand[TreatDummyLorentzFast[FixedPoint[StandardOrdering,Expand[TreatDummyLorentzFast[MomentumConservation[GetsSSOrder[amp,opdimx-GetMassDimensionFromFields[lista]],Length[lista]]]]]]]/.{(a_).(b_)Global`gam[a1___,a_,b_,a2___]:>D Global`gam[a1,a2]}]/.{(a_).(b_)Global`ee[c___,a_,d___]:>StandardOrdering[Global`ee[c,b,d]],(b_).(a_)Global`ee[c___,a_,d___]:>StandardOrdering[Global`ee[c,b,d]]}/.TreatDummy[lista,opdimx](* TreatDummy4Fermion[lista]*)/.{Global`ee[a___,b_,c___,b_,d___]:>0,(a_).(b_)Global`ee[c___,a_,d___,b_,e___]:>0,(b_).(a_)Global`ee[c___,a_,d___,b_,e___]:>0}];


(*

MatchOneAmplitudeFastest2 

Uses;
ManipulateSingleAmplitudeOriginalFast2;
SumIndicesEfficient2;
TreatDummyFlavor;
GetAlphas;

*)

Options[MatchOneAmplitudeFastest2]={FullCheck->False};

MatchOneAmplitudeFastest2[dicE_,dicF_,partlist_,opdimx_,indr_,replacelistgauge_,replacelistkinandindices_,runogaugex_,opts:OptionsPattern[]]:=Block[{ind,ampdif,sys,sol,solii,tio2,check},
Off[Part::pkspec1];
(*Print["1=",DateList[]];*)
(*Print["partis=",partlist];*)
iamp=ToString[ToExpression[iamp]+1];
whichamp=ToString[partlist];
mes2=StringJoin@@{"Doing amplitude ",iamp," of ",allamp,": ",whichamp};
(*Print[Style["Careful, we are setting \[Epsilon](\[Mu],\[Nu],\[Rho],\[Sigma])=0",{Large,Red}]];*)
ind=Transpose[indr][[1]];
ampdif=(ManipulateSingleAmplitudeOriginalFast2[partlist,(dicE[partlist]/.{Global`FourPi->4Pi,Log[a_]->Log[a/Global`mu^2]}),opdimx,Join[{"f","mu","mugam"},ind]]-ManipulateSingleAmplitudeOriginalFast2[partlist,(dicF[partlist]/.Global`eee[a_,b_,c_,d_]:>0/.{Global`FourPi->4Pi,Log[a_]->Log[a/Global`mu^2]}),opdimx,Join[{"f","mu","mugam"},ind]]);
(*Print["2=",DateList[]];eee*)
(*Print["particles=",partlist];
Print["ampdif=",ampdif];
Print["replacelistkinandindices=",replacelistkinandindices];*)
(*sys=Table[TreatDummyFlavor[SumIndicesEfficient2[If[NumericQ[replacelistkinandindices[[i,1]]],ampdif/.(a_).(b_)\[Rule]0/.replacelistgauge/.replacelistkinandindices[[i,2]],Coefficient[ampdif,replacelistkinandindices[[i,1]]]/.replacelistgauge/.replacelistkinandindices[[i,2]]],indr]]\[Equal]0,{i,Length[replacelistkinandindices]}];*)
sys=EliminatParenthesisInAlphas[Table[TreatDummyFlavor[SumIndicesEfficient2[If[NumericQ[replacelistkinandindices[[i,1]]],ampdif/.(a_).(b_)->0/.replacelistkinandindices[[i,2]],Coefficient[ampdif,replacelistkinandindices[[i,1]]]/.replacelistkinandindices[[i,2]]],indr,runogaugex]]==0,{i,Length[replacelistkinandindices]}]];
(*Print["3=",DateList[]];*)
(*Print["sys=",sys];*)
sol=Simplify[Solve[sys,GetAlphas[sys]][[1]]];
(*Print[sol];*)
(*Print["4=",DateList[]];*)
If[OptionValue[FullCheck],
(*tio2=SumExpandIndicesEfficient2[Simplify[EliminatParenthesisInAlphas[ampdif]/.sol/.replacelistgauge],indr];*)
solii=Table[PutParenthesisInAlphas[sol[[i,1]]]->sol[[i,2]],{i,Length[sol]}];
tio2=SumExpandIndicesEfficient2[ampdif/.solii,indr,runogaugex];
(*Print["5=",DateList[]];
Print["tio2=",tio2];*)
(*tio2=SumExpandIndicesEfficient2[Simplify[ampdif/.solii/.replacelistgauge],indr];*)
(*Print["tio1=",Simplify[ampdif//.sol/.replacelistgauge]];*)
(*Print["tio1=",Simplify[EliminatParenthesisInAlphas[ampdif]//.sol/.replacelistgauge]];
Print["tio2=",tio2];
Print["tio2=",tio2/.sol];*)
check=FixedPoint[Function[y,Map[Function[x,TreatDummyFlavorGeneral[x,{"f","mif"}]],y]],tio2];
(*Print["6=",DateList[]];*)
If[Length[check]>0,check=Union[check]];
If[Length[check]==1,check=check[[1]]];
If[Length[check]>1||(NumberQ[check]&&check!=0),
Print[Style["Something is not right! ",Red],partlist,"=",check](*,
Print["check ok!",partlist,"=",check];*)];
];
(*Print["7=",DateList[]];*)
On[Part::pkspec1];
sol
];

(*MatchOneAmplitudeFastest2[dicE_,dicF_,partlist_,opdimx_,indr_,replacelistgauge_,replacelistkinandindices_]:=Block[{ind,ampdif,sys,sol},
Off[Part::pkspec1];
iamp=ToString[ToExpression[iamp]+1];
whichamp=ToString[partlist];
mes2=StringJoin@@{"Doing amplitude ",iamp," of ",allamp,": ",whichamp};
(*Print[Style["Careful, we are setting \[Epsilon](\[Mu],\[Nu],\[Rho],\[Sigma])=0",{Large,Red}]];*)
ind=Transpose[indr][[1]];
ampdif=(ManipulateSingleAmplitudeOriginalFast2[partlist,(dicE[partlist]/.{Global`FourPi\[Rule]4Pi,Log[a_]\[Rule]Log[a/Global`mu^2]}),opdimx,Join[{"f","mu","mugam"},ind]]-ManipulateSingleAmplitudeOriginalFast2[partlist,(dicF[partlist]/.Global`ee[a_,b_,c_,d_]\[RuleDelayed]0/.{Global`FourPi\[Rule]4Pi,Log[a_]\[Rule]Log[a/Global`mu^2]}),opdimx,Join[{"f","mu","mugam"},ind]]);
(*Print["particles=",partlist];
Print["ampdif=",ampdif];
Print["replacelistkinandindices=",replacelistkinandindices];*)
sys=Table[TreatDummyFlavor[SumIndicesEfficient2[If[NumericQ[replacelistkinandindices[[i,1]]],ampdif/.(a_).(b_)\[Rule]0/.replacelistgauge/.replacelistkinandindices[[i,2]],Coefficient[ampdif,replacelistkinandindices[[i,1]]]/.replacelistgauge/.replacelistkinandindices[[i,2]]],indr]]\[Equal]0,{i,Length[replacelistkinandindices]}];
(*Print["sys=",sys];*)
sol=Simplify[Solve[sys,GetAlphas[sys]][[1]]];
On[Part::pkspec1];
sol
];*)

(*
PartialMatcherFastest2[dicE,dicF,opdimx,indr,replacelistgauge,replacelistkinandindicesdic]

Uses: MatchOneAmplitudeFastest2
*)
Options[PartialMatcherFastest2]={FullCheck->False};

PartialMatcherFastest2[dicE_,dicF_,opdimx_,indr_,replacelistgauge_,replacelistkinandindicesdic_,runogaugex_,opts:OptionsPattern[]]:=Block[{commonparticles,ind,tito,teto,res,resi,sol1,alleqs0x,kinx,eqs0x,alleqsx,sols0x,thisamp,thisampi,hora},
Off[Part::pkspec1];
(*Print[Style["Beginning of matching calculation ",Blue],Style[DateString[],Blue]];*)
ind=Transpose[indr][[1]];
commonparticles=Intersection[Keys[dicE],Keys[dicF]];
sol1=Table[
MatchOneAmplitudeFastest2[dicE,dicF,commonparticles[[whichparts]],opdimx,indr,replacelistgauge,replacelistkinandindicesdic[commonparticles[[whichparts]]],runogaugex,Evaluate[FilterRules[{opts},Options[MatchOneAmplitudeFastest2]]]]
,{whichparts,Length[commonparticles]}];
(*
sol1={};
Do[
AppendTo[sol1,MatchOneAmplitudeFastest2[dicE,dicF,commonparticles[[whichparts]],opdimx,indr,replacelistgauge,replacelistkinandindicesdic[commonparticles[[whichparts]]],runogaugex,Evaluate[FilterRules[{opts},Options[MatchOneAmplitudeFastest2]]]]];
,{whichparts,Length[commonparticles]}];
*)
On[Part::pkspec1];
sol1
];

GetParameters[modeldirx_]:=Block[{varsx,counts},
varsx=Join[Import[Global`$matchmakerpath<>"models/"<>modeldirx<>"/QGRAF/model_data/newsymbols","Words"],Import[Global`$matchmakerpath<>"models/"<>modeldirx<>"/QGRAF/model_data/newfunctions","Words"]];
counts=Counts[StringReplace[#,"bar"->""]&/@varsx];
{Extract[Keys[counts],Position[Values[counts],1]],Extract[Keys[counts],Position[Values[counts],2]]}];


PutParenthesisInAlphas[exp_]:=Block[{exp0,wherefs,res},
If[StringQ[exp],exp0=exp,exp0=ToString[exp]];
wherefs=StringPosition[exp0,"f"];
res=exp0;
If[Length[wherefs]>0,
res=StringInsert[res,"[",wherefs[[1,1]]];
res=StringInsert[res,",",wherefs[[2,1]]+1];
If[Length[wherefs]==4,
res=StringInsert[res,",",wherefs[[3,1]]+2];
res=StringInsert[res,",",wherefs[[4,1]]+3];
];
res=res<>"]"];
ToExpression[StringReplace[res,{"f99"->"f99_","f98"->"f98_","f97"->"f97_","f96"->"f96_","f95"->"f95_","f94"->"f94_","f93"->"f93_","f92"->"f92_","f91"->"f91_"}]]
];

noSpuriousE={Global`alphaE12[Global`mif1,Global`mif2]->0,Global`alphaE13[Global`mif1,Global`mif2]->0,Global`alphaE14[Global`mif1,Global`mif2]->0,Global`alphaE15[Global`mif1,Global`mif2]->0,Global`alphaE16[Global`mif1,Global`mif2]->0,Global`alphaE17[Global`mif1,Global`mif2]->0,Global`alphaE18[Global`mif1,Global`mif2]->0,Global`alphaE19[Global`mif1,Global`mif2]->0,Global`alphaE20[Global`mif1,Global`mif2]->0,Global`alphaE21[Global`mif1,Global`mif2]->0,Global`alphaE12bar[Global`mif1,Global`mif2]->0,Global`alphaE13bar[Global`mif1,Global`mif2]->0,Global`alphaE14bar[Global`mif1,Global`mif2]->0,Global`alphaE15bar[Global`mif1,Global`mif2]->0,Global`alphaE16bar[Global`mif1,Global`mif2]->0,Global`alphaE17bar[Global`mif1,Global`mif2]->0,Global`alphaE18bar[Global`mif1,Global`mif2]->0,Global`alphaE19bar[Global`mif1,Global`mif2]->0,Global`alphaE20bar[Global`mif1,Global`mif2]->0,Global`alphaE21bar[Global`mif1,Global`mif2]->0};

prettynames={Global`alO01->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]D\)]\)",Global`alO02->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]\[EmptySquare]\)]\)",Global`alO03->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]\)]\)",Global`alO04->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]G\)]\)",Global`alO05->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(G\), \(~\)]\)]\)",Global`alO06->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]W\)]\)",Global`alO07->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(W\), \(~\)]\)]\)",Global`alO08->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]B\)]\)",Global`alO09->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(B\), \(~\)]\)]\)",Global`alO10->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]WB\)]\)",Global`alO11->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(W\), \(~\)] B\)]\)",Global`alO12->"\!\(\*SubscriptBox[\(\[Alpha]\), \(G\)]\)",Global`alO13->"\!\(\*SubscriptBox[\(\[Alpha]\), OverscriptBox[\(G\), \(~\)]]\)",Global`alO14->"\!\(\*SubscriptBox[\(\[Alpha]\), \(W\)]\)",Global`alO15->"\!\(\*SubscriptBox[\(\[Alpha]\), OverscriptBox[\(W\), \(~\)]]\)",Global`alO16->"\!\(\*SubscriptBox[\(\[Alpha]\), \(e\[Phi]\)]\)",Global`alO17->"\!\(\*SubscriptBox[\(\[Alpha]\), \(u\[Phi]\)]\)",Global`alO18->"\!\(\*SubscriptBox[\(\[Alpha]\), \(d\[Phi]\)]\)",Global`alO19->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]l\), \((1)\)]\)",Global`alO20->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]l\), \((3)\)]\)",Global`alO21->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]e\)]\)",Global`alO22->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]q\), \((1)\)]\)",Global`alO23->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]q\), \((3)\)]\)",Global`alO24->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]u\)]\)",Global`alO25->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]d\)]\)",Global`alO26->"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]ud\)]\)",Global`alO27->"\!\(\*SubscriptBox[\(\[Alpha]\), \(eB\)]\)",Global`alO28->"\!\(\*SubscriptBox[\(\[Alpha]\), \(uB\)]\)",Global`alO29->"\!\(\*SubscriptBox[\(\[Alpha]\), \(dB\)]\)",Global`alO30->"\!\(\*SubscriptBox[\(\[Alpha]\), \(eW\)]\)",Global`alO31->"\!\(\*SubscriptBox[\(\[Alpha]\), \(uW\)]\)",Global`alO32->"\!\(\*SubscriptBox[\(\[Alpha]\), \(dW\)]\)",Global`alO33->"\!\(\*SubscriptBox[\(\[Alpha]\), \(uG\)]\)",Global`alO34->"\!\(\*SubscriptBox[\(\[Alpha]\), \(dG\)]\)",Global`alO35->"\!\(\*SubscriptBox[\(\[Alpha]\), \(le\)]\)",Global`alO36->"\!\(\*SubscriptBox[\(\[Alpha]\), \(lu\)]\)",Global`alO37->"\!\(\*SubscriptBox[\(\[Alpha]\), \(ld\)]\)",Global`alO38->"\!\(\*SubscriptBox[\(\[Alpha]\), \(qe\)]\)",Global`alO39->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qu\), \((1)\)]\)",Global`alO40->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qu\), \((8)\)]\)",Global`alO41->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qd\), \((1)\)]\)",Global`alO42->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qd\), \((8)\)]\)",Global`alO43->"\!\(\*SubscriptBox[\(\[Alpha]\), \(ledq\)]\)",Global`alO44->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(quqd\), \((1)\)]\)",Global`alO45->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(quqd\), \((8)\)]\)",Global`alO46->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(lequ\), \((1)\)]\)",Global`alO47->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(lequ\), \((3)\)]\)",Global`alO48->"\!\(\*SubscriptBox[\(\[Alpha]\), \(ll\)]\)",Global`alO49->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qq\), \((1)\)]\)",Global`alO50->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qq\), \((3)\)]\)",Global`alO51->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(lq\), \((1)\)]\)",Global`alO52->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(lq\), \((3)\)]\)",Global`alO53->"\!\(\*SubscriptBox[\(\[Alpha]\), \(ee\)]\)",Global`alO54->"\!\(\*SubscriptBox[\(\[Alpha]\), \(uu\)]\)",Global`alO55->"\!\(\*SubscriptBox[\(\[Alpha]\), \(dd\)]\)",Global`alO56->"\!\(\*SubscriptBox[\(\[Alpha]\), \(eu\)]\)",Global`alO57->"\!\(\*SubscriptBox[\(\[Alpha]\), \(ed\)]\)",Global`alO58->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(ud\), \((1)\)]\)",Global`alO59->"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(ud\), \((8)\)]\)"};

prettynamesbar={Global`alO16bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(e\[Phi]\)]\)",Global`alO17bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(u\[Phi]\)]\)",Global`alO18bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(d\[Phi]\)]\)",Global`alO19bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]l\), \((1)\)]\)",Global`alO20bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]l\), \((3)\)]\)",Global`alO21bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]e\)]\)",Global`alO22bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]q\), \((1)\)]\)",Global`alO23bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]q\), \((3)\)]\)",Global`alO24bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]u\)]\)",Global`alO25bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]d\)]\)",Global`alO26bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]ud\)]\)",Global`alO27bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(eB\)]\)",Global`alO28bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(uB\)]\)",Global`alO29bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(dB\)]\)",Global`alO30bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(eW\)]\)",Global`alO31bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(uW\)]\)",Global`alO32bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(dW\)]\)",Global`alO33bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(uG\)]\)",Global`alO34bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(dG\)]\)",Global`alO35bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(le\)]\)",Global`alO36bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(lu\)]\)",Global`alO37bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ld\)]\)",Global`alO38bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qe\)]\)",Global`alO39bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qu\), \((1)\)]\)",Global`alO40bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qu\), \((8)\)]\)",Global`alO41bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qd\), \((1)\)]\)",Global`alO42bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qd\), \((8)\)]\)",Global`alO43bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ledq\)]\)",Global`alO44bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(quqd\), \((1)\)]\)",Global`alO45bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(quqd\), \((8)\)]\)",Global`alO46bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(lequ\), \((1)\)]\)",Global`alO47bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(lequ\), \((3)\)]\)",Global`alO48bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ll\)]\)",Global`alO49bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qq\), \((1)\)]\)",Global`alO50bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qq\), \((3)\)]\)",Global`alO51bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(lq\), \((1)\)]\)",Global`alO52bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(lq\), \((3)\)]\)",Global`alO53bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ee\)]\)",Global`alO54bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(uu\)]\)",Global`alO55bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(dd\)]\)",Global`alO56bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(eu\)]\)",Global`alO57bar->"\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ed\)]\)",Global`alO58bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ud\), \((1)\)]\)",Global`alO59bar->"\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ud\), \((8)\)]\)"};

ComplexConjugate[exp_,complexifyx_]:=Conjugate[exp/.complexifyx]//.{Conjugate[a_+b_]->Conjugate[a]+Conjugate[b],Conjugate[a_*b_]->Conjugate[a]Conjugate[b]}/.Conjugate[a_]->a;

Options[TotalMatcher]={FullCheck->False};

(* Total macher usara como argumento unicamente modeldir, todo lo dem\[AAcute]s se leer\[AAcute] directamente
autom\[AAcute]ticamente desde matcher *)
TotalMatcher[modelname_,opts:OptionsPattern[]]:=Block[{diElist,diFlist,groupdata,indranges,indi,eftname,eftdim,looplevel,dini,dfin,allsols,allsols0,realpars,complexpars,complexify,tao,sol,newsol,newsolbar,fullsol,finalres,runogauge,finalresult},
Off[Part::pkspec1];
allsols={};
Get[Global`$matchmakerpath<>"core/listareplacesymmetry"];
Get[Global`$matchmakerpath<>"core/kinematicdir"];
(*Get["redundancies.dat"];*)
Get[Global`$matchmakerpath<>"core/totalredundancies.dat"];
realpars=Union[Join[GetParameters[modelname][[1]],Union[Flatten[Transpose[Table[GetParameters[$effdiranddimlist[[i,1]]],{i,Length[$effdiranddimlist]}]][[1]]]]]];
complexpars=Union[Join[GetParameters[modelname][[2]],Union[Flatten[Transpose[Table[GetParameters[$effdiranddimlist[[i,1]]],{i,Length[$effdiranddimlist]}]][[2]]]]]];
complexify=Join[Table[ToExpression[complexpars[[i]]]->ToExpression[complexpars[[i]]<>"bar"],{i,Length[complexpars]}],Table[ToExpression[complexpars[[i]]<>"bar"]->ToExpression[complexpars[[i]]],{i,Length[complexpars]}]];Get[Global`$matchmakerpath<>"models/"<>modelname<>"/QGRAF/model_data/replacegaugedata"];
runogauge=Join[Table[Global`replacegaugedata[[i,1]]->1,{i,Length[Global`replacegaugedata]}],{Global`dd[a_,b_]->1,Global`ee[a_,b_]->1}];
diElist=Table[GetDictionary[$effdiranddimlist[[i,1]],Global`listareplacesymmetry],{i,Length[$effdiranddimlist]}];
diFlist=GetDictionary[modelname];
groupdata=GetGaugeData[modelname];
indranges=GetGaugeIndicesAndRanges[modelname];
indi=GetGaugeIndices[modelname];
eftname=ToString[$effdiranddimlist[[1,1]]];
eftdim=ToString[$effdiranddimlist[[1,2]]];
looplevel=ToString[0];
dini=DateString[];
iamp="0";
allamp=ToString[Length[Flatten[Table[Intersection[Keys[diElist[[whicheft,1]]],Keys[diFlist[[1]]]],{whicheft,Length[diElist]}],1]]+Length[Flatten[Table[Intersection[Keys[diElist[[whicheft,1]]],Keys[diFlist[[2]]]],{whicheft,Length[diElist]}],1]]];
Print["Beginning of the calculation: ",dini];
mes=StringJoin@@{"We are doing ",eftname," at dimension ",eftdim," and ",looplevel," loop level."};
mes2=StringJoin@@{"Doing amplitude ",iamp," out of ",allamp};
Print[Style[Dynamic[mes],Large,Blue]];
Print[Style[Dynamic[mes2],Large,Red]];
(*Print[Style["Careful, we are setting \[Epsilon](\[Mu],\[Nu],\[Rho],\[Sigma])=0",{Large,Green}]];*)
allsols=
Table[
eftname=ToString[$effdiranddimlist[[whicheft,1]]];
eftdim=ToString[$effdiranddimlist[[whicheft,2]]];
looplevel=ToString[iloop];
mes=StringJoin@@{"We are doing ",eftname," at dimension ",eftdim," and ",looplevel," loop level"};
PartialMatcherFastest2[diElist[[whicheft,1]],diFlist[[iloop+1]],$effdiranddimlist[[whicheft,2]],indranges,Global`replacegaugedata,Global`kinematicdir[$effdiranddimlist[[whicheft,1]]],runogauge,Evaluate[FilterRules[{opts},Options[PartialMatcherFastest2]]]](*AppendTo[allsols0,PartialMatcherFastest2[diElist[[whicheft,1]],diFlist[[iloop+1]],$effdiranddimlist[[whicheft,2]],indranges,Global`replacegaugedata,Global`kinematicdir[$effdiranddimlist[[whicheft,1]]],runogauge,Evaluate[FilterRules[{opts},Options[PartialMatcherFastest2]]]]];*)
,{iloop,0,1},{whicheft,1,Length[$effdiranddimlist]}];
(*Do[
(*allsols0={};
Do[*)
allsols0=
Table[
eftname=ToString[$effdiranddimlist[[whicheft,1]]];
eftdim=ToString[$effdiranddimlist[[whicheft,2]]];
looplevel=ToString[iloop];
mes=StringJoin@@{"We are doing ",eftname," at dimension ",eftdim," and ",looplevel," loop level"};
PartialMatcherFastest2[diElist[[whicheft,1]],diFlist[[iloop+1]],$effdiranddimlist[[whicheft,2]],indranges,Global`replacegaugedata,Global`kinematicdir[$effdiranddimlist[[whicheft,1]]],runogauge,Evaluate[FilterRules[{opts},Options[PartialMatcherFastest2]]]](*AppendTo[allsols0,PartialMatcherFastest2[diElist[[whicheft,1]],diFlist[[iloop+1]],$effdiranddimlist[[whicheft,2]],indranges,Global`replacegaugedata,Global`kinematicdir[$effdiranddimlist[[whicheft,1]]],runogauge,Evaluate[FilterRules[{opts},Options[PartialMatcherFastest2]]]]];*)
,{whicheft,1,Length[$effdiranddimlist]}];
AppendTo[allsols,allsols0];
,{iloop,0,1}];*)
On[Part::pkspec1];
tao={Union[Flatten[allsols[[1]]]],Union[Flatten[allsols[[2]]]]};
sol=Table[Sort[Table[PutParenthesisInAlphas[tao[[j,i,1]]]->(tao[[j,i,2]]/.{Global`mif1->Global`f1,Global`mif2->Global`f2,Global`mif3->Global`f3,Global`mif4->Global`f4,Global`mif5->Global`f5,Global`mif6->Global`f6}),{i,Length[tao[[j]]]}]],{j,Length[tao]}];
newsolbar=Table[Table[(sol[[j,i,1]]/.complexify)->TreatDummyFlavor[ComplexConjugate[sol[[j,i,2]],complexify]],{i,Length[sol[[j]]]}],{j,Length[sol]}];
newsol=Table[Table[(sol[[j,i,1]])->TreatDummyFlavor[sol[[j,i,2]]],{i,Length[sol[[j]]]}],{j,Length[sol]}];
Print["newsol=",newsol];
Print["newsolbar=",newsolbar];
fullsol=Table[Union[Join[newsol[[j]],newsolbar[[j]]]],{j,Length[newsol]}]/.{Global`mif1->Global`MIF1,Global`mif2->Global`MIF2,Global`mif3->Global`MIF3,Global`mif4->Global`MIF4,Global`mif5->Global`MIF5,Global`mif6->Global`MIF6};
finalres={Global`finalruleordered/.fullsol[[1]]/.noSpuriousE/.prettynames/.prettynamesbar,Global`finalruleordered/.fullsol[[2]]/.noSpuriousE/.prettynames/.prettynamesbar};
(*finalres={DeleteCases[Global`finalruleordered/.fullsol[[1]]/.noSpuriousE/.prettynames/.prettynamesbar,a_\[Rule]0],DeleteCases[Global`finalruleordered/.fullsol[[2]]/.noSpuriousE/.prettynames/.prettynamesbar,a_\[Rule]0]};*)
(*Print["complexify=",complexify];*)
finalresult={Table[finalres[[1,i,1]]->Simplify[FixedPoint[TreatDummyFlavorGeneral[#,{"mif","MIF"}]&,finalres[[1,i,2]]]],{i,Length[finalres[[1]]]}],Table[finalres[[2,i,1]]->Simplify[FixedPoint[TreatDummyFlavorGeneral[#,{"mif","MIF"}]&,finalres[[2,i,2]]]],{i,Length[finalres[[2]]]}]};
dfin=DateString[];
Print["End of matching calculation. ",dfin];
mes="Matching calculation finished. It took "<>ToString[DateDifference[dini,dfin,{"Hour","Minute","Second"}]];
Print[mes];
finalresult
(*{Table[finalres[[1,i,1]]\[Rule]Simplify[TreatDummyFlavorGeneral[finalres[[1,i,2]],{"mif","MIF"}]],{i,Length[finalres[[1]]]}],Table[finalres[[2,i,1]]\[Rule]Simplify[TreatDummyFlavorGeneral[finalres[[2,i,2]],{"mif","MIF"}]],{i,Length[finalres[[2]]]}]}*)
]


CheckHermiticityAndSymmetry[modelname_,sol_]:=Block[{realpars,complexpars,complexify,GetIm,GetIm2,GetIm4,Exchange4},
realpars=Union[Join[GetParameters[modelname][[1]],Union[Flatten[Transpose[Table[GetParameters[$effdiranddimlist[[i,1]]],{i,Length[$effdiranddimlist]}]][[1]]]]]];
complexpars=Union[Join[GetParameters[modelname][[2]],Union[Flatten[Transpose[Table[GetParameters[$effdiranddimlist[[i,1]]],{i,Length[$effdiranddimlist]}]][[2]]]]]];
complexify=Join[Table[ToExpression[complexpars[[i]]]->ToExpression[complexpars[[i]]<>"bar"],{i,Length[complexpars]}],Table[ToExpression[complexpars[[i]]<>"bar"]->ToExpression[complexpars[[i]]],{i,Length[complexpars]}]];
(*Print[complexify];*)
GetIm[exp_]:=TreatDummyFlavorGeneral[exp-ComplexConjugate[exp,complexify],{"mif"}];
GetIm2[expbar_,exp_]:=TreatDummyFlavorGeneral[expbar[Global`mif1,Global`mif2]-exp[Global`mif2,Global`mif1]/.sol,{"mif"}];
GetIm4[expbar_,exp_]:=TreatDummyFlavorGeneral[expbar[Global`mif1,Global`mif2,Global`mif3,Global`mif4]-exp[Global`mif2,Global`mif1,Global`mif4,Global`mif3]/.sol,{"mif"}];
Exchange4[exp_]:=TreatDummyFlavorGeneral[exp[Global`mif1,Global`mif2,Global`mif3,Global`mif4]-exp[Global`mif3,Global`mif4,Global`mif1,Global`mif2]/.sol,{"mif"}];
{{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]D\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]D\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]\[EmptySquare]\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]\[EmptySquare]\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]G\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]G\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(G\), \(~\)]\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(G\), \(~\)]\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]W\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]W\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(W\), \(~\)]\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(W\), \(~\)]\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]B\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]B\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(B\), \(~\)]\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(B\), \(~\)]\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]WB\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]WB\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(W\), \(~\)] B\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi] \*OverscriptBox[\(W\), \(~\)] B\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(G\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(G\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), OverscriptBox[\(G\), \(~\)]]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), OverscriptBox[\(G\), \(~\)]]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(W\)]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), \(W\)]\)"/.sol]},{"\!\(\*SubscriptBox[\(\[Alpha]\), OverscriptBox[\(W\), \(~\)]]\)",GetIm["\!\(\*SubscriptBox[\(\[Alpha]\), OverscriptBox[\(W\), \(~\)]]\)"/.sol]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]l\), \((1)\)]\)",GetIm2["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]l\), \((1)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]l\), \((1)\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]l\), \((3)\)]\)",GetIm2["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]l\), \((3)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]l\), \((3)\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]e\)]\)",GetIm2["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]e\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]e\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]q\), \((1)\)]\)",GetIm2["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]q\), \((1)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]q\), \((1)\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]q\), \((3)\)]\)",GetIm2["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]q\), \((3)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(\[Phi]q\), \((3)\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]u\)]\)",GetIm2["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]u\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]u\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]d\)]\)",GetIm2["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(\[Phi]d\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(\[Phi]d\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(le\)]\)",GetIm4["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(le\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(le\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(lu\)]\)",GetIm4["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(lu\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(lu\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(ld\)]\)",GetIm4["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ld\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(ld\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(qe\)]\)",GetIm4["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qe\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(qe\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qu\), \((1)\)]\)",GetIm4["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qu\), \((1)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qu\), \((1)\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qu\), \((8)\)]\)",GetIm4["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qu\), \((8)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qu\), \((8)\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qd\), \((1)\)]\)",GetIm4["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qd\), \((1)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qd\), \((1)\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qd\), \((8)\)]\)",GetIm4["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qd\), \((8)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qd\), \((8)\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(ll\)]\)",GetIm4["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ll\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(ll\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qq\), \((1)\)]\)",GetIm4["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qq\), \((1)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qq\), \((1)\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qq\), \((3)\)]\)",GetIm4["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(qq\), \((3)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qq\), \((3)\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(lq\), \((1)\)]\)",GetIm4["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(lq\), \((1)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(lq\), \((1)\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(lq\), \((3)\)]\)",GetIm4["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(lq\), \((3)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(lq\), \((3)\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(ee\)]\)",GetIm4["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ee\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(ee\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(uu\)]\)",GetIm4["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(uu\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(uu\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(dd\)]\)",GetIm4["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(dd\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(dd\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(eu\)]\)",GetIm4["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(eu\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(eu\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(ed\)]\)",GetIm4["\!\(\*SubscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ed\)]\)","\!\(\*SubscriptBox[\(\[Alpha]\), \(ed\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(ud\), \((1)\)]\)",GetIm4["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ud\), \((1)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(ud\), \((1)\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(ud\), \((8)\)]\)",GetIm4["\!\(\*SubsuperscriptBox[OverscriptBox[\(\[Alpha]\), \(_\)], \(ud\), \((8)\)]\)","\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(ud\), \((8)\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(ll\)]\)",Exchange4["\!\(\*SubscriptBox[\(\[Alpha]\), \(ll\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qq\), \((1)\)]\)",Exchange4["\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qq\), \((1)\)]\)"]},{"\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qq\), \((3)\)]\)",Exchange4["\!\(\*SubsuperscriptBox[\(\[Alpha]\), \(qq\), \((3)\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(ee\)]\)",Exchange4["\!\(\*SubscriptBox[\(\[Alpha]\), \(ee\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(uu\)]\)",Exchange4["\!\(\*SubscriptBox[\(\[Alpha]\), \(uu\)]\)"]},{"\!\(\*SubscriptBox[\(\[Alpha]\), \(dd\)]\)",Exchange4["\!\(\*SubscriptBox[\(\[Alpha]\), \(dd\)]\)"]}}


(*,Global`alO20\[Rule]"Subsuperscript[\[Alpha], \[Phi]l, (3)]",Global`alO21\[Rule]"Subscript[\[Alpha], \[Phi]e]",Global`alO22\[Rule]"Subsuperscript[\[Alpha], \[Phi]q, (1)]",Global`alO23\[Rule]"Subsuperscript[\[Alpha], \[Phi]q, (3)]",Global`alO24\[Rule]"Subscript[\[Alpha], \[Phi]u]",Global`alO25\[Rule]"Subscript[\[Alpha], \[Phi]d]",Global`alO26\[Rule]"Subscript[\[Alpha], \[Phi]ud]",Global`alO27\[Rule]"Subscript[\[Alpha], eB]",Global`alO28\[Rule]"Subscript[\[Alpha], uB]",Global`alO29\[Rule]"Subscript[\[Alpha], dB]",Global`alO30\[Rule]"Subscript[\[Alpha], eW]",Global`alO31\[Rule]"Subscript[\[Alpha], uW]",Global`alO32\[Rule]"Subscript[\[Alpha], dW]",Global`alO33\[Rule]"Subscript[\[Alpha], uG]",Global`alO34\[Rule]"Subscript[\[Alpha], dG]",Global`alO35\[Rule]"Subscript[\[Alpha], le]",Global`alO36\[Rule]"Subscript[\[Alpha], lu]",Global`alO37\[Rule]"Subscript[\[Alpha], ld]",Global`alO38\[Rule]"Subscript[\[Alpha], qe]",Global`alO39\[Rule]"Subsuperscript[\[Alpha], qu, (1)]",Global`alO40\[Rule]"Subsuperscript[\[Alpha], qu, (8)]",Global`alO41\[Rule]"Subsuperscript[\[Alpha], qd, (1)]",Global`alO42\[Rule]"Subsuperscript[\[Alpha], qd, (8)]",Global`alO43\[Rule]"Subscript[\[Alpha], ledq]",Global`alO44\[Rule]"Subsuperscript[\[Alpha], quqd, (1)]",Global`alO45\[Rule]"Subsuperscript[\[Alpha], quqd, (8)]",Global`alO46\[Rule]"Subsuperscript[\[Alpha], lequ, (1)]",Global`alO47\[Rule]"Subsuperscript[\[Alpha], lequ, (3)]",Global`alO48\[Rule]"Subscript[\[Alpha], ll]",Global`alO49\[Rule]"Subsuperscript[\[Alpha], qq, (1)]",Global`alO50\[Rule]"Subsuperscript[\[Alpha], qq, (3)]",Global`alO51\[Rule]"Subsuperscript[\[Alpha], lq, (1)]",Global`alO52\[Rule]"Subsuperscript[\[Alpha], lq, (3)]",Global`alO53\[Rule]"Subscript[\[Alpha], ee]",Global`alO54\[Rule]"Subscript[\[Alpha], uu]",Global`alO55\[Rule]"Subscript[\[Alpha], dd]",Global`alO56\[Rule]"Subscript[\[Alpha], eu]",Global`alO57\[Rule]"Subscript[\[Alpha], ed]",Global`alO58\[Rule]"Subsuperscript[\[Alpha], ud, (1)]",Global`alO59\[Rule]"Subsuperscript[\[Alpha], ud, (8)]"}

{"Subsuperscript[Overscript[\[Alpha], _], \[Phi]l, (1)]",Global`alO20bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], \[Phi]l, (3)]",Global`alO21bar\[Rule]"Subscript[Overscript[\[Alpha], _], \[Phi]e]",Global`alO22bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], \[Phi]q, (1)]",Global`alO23bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], \[Phi]q, (3)]",Global`alO24bar\[Rule]"Subscript[Overscript[\[Alpha], _], \[Phi]u]",Global`alO25bar\[Rule]"Subscript[Overscript[\[Alpha], _], \[Phi]d]",Global`alO26bar\[Rule]"Subscript[Overscript[\[Alpha], _], \[Phi]ud]",Global`alO27bar\[Rule]"Subscript[Overscript[\[Alpha], _], eB]",Global`alO28bar\[Rule]"Subscript[Overscript[\[Alpha], _], uB]",Global`alO29bar\[Rule]"Subscript[Overscript[\[Alpha], _], dB]",Global`alO30bar\[Rule]"Subscript[Overscript[\[Alpha], _], eW]",Global`alO31bar\[Rule]"Subscript[Overscript[\[Alpha], _], uW]",Global`alO32bar\[Rule]"Subscript[Overscript[\[Alpha], _], dW]",Global`alO33bar\[Rule]"Subscript[Overscript[\[Alpha], _], uG]",Global`alO34bar\[Rule]"Subscript[Overscript[\[Alpha], _], dG]",Global`alO35bar\[Rule]"Subscript[Overscript[\[Alpha], _], le]",Global`alO36bar\[Rule]"Subscript[Overscript[\[Alpha], _], lu]",Global`alO37bar\[Rule]"Subscript[Overscript[\[Alpha], _], ld]",Global`alO38bar\[Rule]"Subscript[Overscript[\[Alpha], _], qe]",Global`alO39bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], qu, (1)]",Global`alO40bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], qu, (8)]",Global`alO41bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], qd, (1)]",Global`alO42bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], qd, (8)]",Global`alO43bar\[Rule]"Subscript[Overscript[\[Alpha], _], ledq]",Global`alO44bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], quqd, (1)]",Global`alO45bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], quqd, (8)]",Global`alO46bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], lequ, (1)]",Global`alO47bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], lequ, (3)]",Global`alO48bar\[Rule]"Subscript[Overscript[\[Alpha], _], ll]",Global`alO49bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], qq, (1)]",Global`alO50bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], qq, (3)]",Global`alO51bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], lq, (1)]",Global`alO52bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], lq, (3)]",Global`alO53bar\[Rule]"Subscript[Overscript[\[Alpha], _], ee]",Global`alO54bar\[Rule]"Subscript[Overscript[\[Alpha], _], uu]",Global`alO55bar\[Rule]"Subscript[Overscript[\[Alpha], _], dd]",Global`alO56bar\[Rule]"Subscript[Overscript[\[Alpha], _], eu]",Global`alO57bar\[Rule]"Subscript[Overscript[\[Alpha], _], ed]",Global`alO58bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], ud, (1)]",Global`alO59bar\[Rule]"Subsuperscript[Overscript[\[Alpha], _], ud, (8)]"}*)
]

(*


TotalMatcherFastest2[dicE_,dicF_,opdimx_,indr_,replacelistgauge_,replacelistkinandindicesdic_]:=
eftname=ToString[$effdiranddimlist[[1,1]]]
eftdim=ToString[$effdiranddimlist[[1,2]]]
looplevel=ToString[0]
Print[Style[Dynamic[StringJoin@@{"We are doing ",eftname," at dimension ",eftdim," and ",looplevel," loop level"}],Large,Blue]];

Do[
Do[
eftname=ToString[$effdiranddimlist[[whicheft,1]]];
eftdim=ToString[$effdiranddimlist[[whicheft,2]]];
looplevel=ToString[iloop];
Print[AbsoluteTiming[PartialMatcherFastest2[diElist[[whicheft,1]],diFlist[[iloop+1]],$effdiranddimlist[[whicheft,2]],indranges,replacealllist2,kinematicdir[$effdiranddimlist[[whicheft,1]]]]]];
,{whicheft,1,2+0Length[$effdiranddimlist]}];
,{iloop,0,0+0*1}]


*)


End[]


EndPackage[]
