(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["UseSusyNo`",{"Susyno`IO`","Susyno`LieGroups`"}]
(*,"../matcher`"}]*)


ReplaceGaugeData::usage="ReplaceGaugeData[modeldir] produces a file with the necessary replacement rules for the gauge couplings in the model.";


Begin["`Private`"]


Global`$matchmakerpath="/home/adrian/work/matchmakerjsp/";
Get["matcher.m"];
Conm[A_,B_]:=A.B-B.A;


GetIrrepDynkin[group_,n_]:=Module[{tab,reps,ps,Group,NN},Group=ToExpression[group];
NN=ToExpression[n];
tab=RepsUpToDimN[Group,NN];
reps=RepName[Group,#]&/@tab;
ps=Position[reps,NN//ToString//Style[#,Bold]&,1]//First;
tab[[ps]]//First];

GetGroupIrreps[list_]:=Module[{q,i,k,tg,group,stf,stf2,irrep,dirrep},tg={};
q=1;
i=1;
While[i<=Length[list],If[Length[list[[i]]]==3,For[k=i+1,k<=Length[list],k++,If[Length[list[[k]]]==4,group=list[[i,3]];
stf=Part[list[[k]],{1,4}];
irrep=stf//Last;
dirrep=GetIrrepDynkin[group,irrep];
stf2=ReplaceAll[stf,{irrep->dirrep}];
tg=Append[tg,Join[{group},stf2]]];
If[Length[list[[k]]]==3,k=Length[list]]];q++];i++];
tg];



listgens2[gr_,genname_,rep_]:=Block[{dim,Gr,gens},
Gr=ToExpression[gr];
dim=DimR[Gr,rep];
gens=SparseArray[RepMatrices[Gr,GetIrrepDynkin[Gr,dim]]];
ToExpression[ToString[genname]<>"[a___]"]->gens[[a]]
];


ReplaceGenList2[grdat_]:=Block[{gooddata},
gooddata=GetGroupIrreps[grdat];
Flatten[Table[listgens2@@gooddata[[i]],{i,Length[gooddata]}]]
(*Table[listgens[gooddata[[i,1]],gooddata[[i,2]],gooddata[[i,3]]],{i,2+2Length[gooddata]}]*)
];

StructConsts[Group_]:=Module[{gen,dR,nR,ff,Rep},Rep=Table[0,Length[Group]];
Rep[[1]]=1;
gen=RepMatrices[Group,Rep];
dR=DynkinIndex[Group,Rep];
nR=Length[gen];
ff=-I*(1/dR)*Table[Tr[Conm[gen[[i]],gen[[j]]].gen[[k]]],{i,1,nR},{j,1,nR},{k,1,nR}]//FullSimplify;
ff];

GetGroupfs[list_]:=Module[{tg,i},tg={};
For[i=1,i<=Length[list],i++,If[Length[list[[i]]]==3,tg=Append[tg,{list[[i,3]],list[[i,2]]}]]];
tg];

listfs2[gr_,fname_]:=Block[{Gr,fs},
Gr=ToExpression[gr];
fs=SparseArray[StructConsts[Gr]];
ToExpression[ToString[fname]<>"[a___]"]->fs[[a]]]

ReplacefsList2[grdat_]:=Module[{gooddata},
gooddata=GetGroupfs[grdat];
Flatten[Table[listfs2@@gooddata[[i]],{i,Length[gooddata]}]]];


ReplaceAllList2[grdat_]:=Join[ReplaceGenList2[grdat],ReplacefsList2[grdat]];


ReplaceGaugeData[modeldir_]:=Block[{groupdata},
groupdata=GetGaugeData[modeldir];
Global`replacegaugedata=ReplaceAllList2[groupdata];
Save["../models/"<>modeldir<>"/QGRAF/model_data/replacegaugedata",Global`replacegaugedata];
];



End[]


EndPackage[]
