(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(*BeginPackage["FR2QGRAF`",{"FeynRules`"}]*)
BeginPackage["FR2QGRAF`"]



WriteMM::usage="FR2QGRAF[lag] is a function that given a FeynRules Lagrangian it creates the MM model";
FR2Text::usage="";


Begin["`Private`"]


Needs["FeynRules`"];


(* Note that we need to have the model loaded for this to work *)


tiro=Complement[Flatten[Table[MR$GaugeGroups[[i,2]],{i,Length[MR$GaugeGroups]}]],DeleteCases[Flatten[Table[MR$GaugeGroups[[i,2]],{i,Length[MR$GaugeGroups]}]],Definitions:>a__]];
turo=Table[(Definitions/.tiro[[i]])[[1,1,0]],{i,Length[tiro]}];
turoo=Flatten[Table[{ToExpression[ToString[turo[[i]]]<>"[a__]:>b__"],ToExpression[ToString[turo[[i]]]<>"[a__]->b__"]},{i,Length[turo]}]];
Do[MR$Definitions=DeleteCases[MR$Definitions,turoo[[i]]],{i,Length[turoo]}];


GetIndexInfo=Flatten[Apply[List,DeleteCases[Union[Flatten[(Indices/.MR$ClassesRules[#])&/@MR$ClassesList]],Indices],2]];
IndexForm=Join[Transpose[{GetIndexInfo,
MR$IndForm/@GetIndexInfo,ToString/@Length/@IndexRange/@Index/@GetIndexInfo}],{{Spin,y,"Dy"},{Lorentz,mu,"D"}}]
IndexAssoc=AssociationThread@@Transpose@Transpose[Take[Transpose[IndexForm],2]]
Particle2IndexAssoc=AssociationThread@@{(ClassName/.MR$ClassesRules[#])&/@MR$ClassesList
,(Indices/.MR$ClassesRules[#])&/@MR$ClassesList/.Indices->{}}
Particle2TypeAssoc=AssociationThread@@{(ClassName/.MR$ClassesRules[#])&/@MR$ClassesList
,Head/@MR$ClassesList}
PhysicalParticleList=DeleteCases[Keys[Particle2IndexAssoc],x_/;UnphysicalQ[x]]
Particle2MassAssoc=AssociationThread@@{(ClassName/.MR$ClassesRules[#])&/@MR$ClassesList
,(Mass/.MR$ClassesRules[#])&/@MR$ClassesList/.Mass->{}}




FR2Text[x_]:=Module[{expression,greekrule,PythonForm,lp,rp,a,b,i,j,iji,antes,despues},
expression=x/.{ME[a___]:>MI[a],Eps[a___]:>eps[a],Complex[a_,b_]->a+II b,ProjM:>SEVEN/2,ProjM[a___]:>SEVEN[a]/2,ProjP->SIX/2,ProjP[a___]->SIX[a]/2};
lp="[";
rp="]";
PythonForm[];
PythonForm[Rational[a_,b_]]:=PythonForm[a]<>"/"<>PythonForm[b];
PythonForm[Times[a_,b_]]:="("<>PythonForm[a]<>")*("<>PythonForm[b]<>")";
PythonForm[Plus[a_,b_]]:="("<>PythonForm[a]<>" + "<>PythonForm[b]<>")";
PythonForm[Power[a_,b_]]:="("<>PythonForm[a]<>")"<>"^"<>"("<>PythonForm[b]<>")";
(*Pi and E*)
PythonForm[\[Pi]]="pi";
PythonForm[E]="e";
(*FR functions that need a special ordering of indices *)
PythonForm[Conjugate[a_]]:=PythonForm[a]<>"bar";
PythonForm[Conjugate[a_[b_]]]:=PythonForm[a]<>"bar"<>lp<>PythonForm[b]<>rp;
PythonForm[Conjugate[a_[b_,c_]]]:=PythonForm[a]<>"bar"<>lp<>PythonForm[b]<>","<>PythonForm[c]<>rp;
(* Generic FR functions with arbitrary number of parameters *)
PythonForm[Conjugate[a_[b___]]]:=PythonForm[a]<>"bar"<>lp<>StringRiffle[Map[PythonForm,List[b]],","]<>rp;
PythonForm[Ga[a_,b_,c_]]:="gam"<>lp<>PythonForm[b]<>","<>PythonForm[a]<>","<>PythonForm[c]<>rp;
PythonForm[MI[a_,b_]]:="gi"<>lp<>PythonForm[a]<>","<>PythonForm[b]<>rp;
PythonForm[FV[a_,b_]]:="Mom"<>lp<>"pp"<>PythonForm[a]<>","<>PythonForm[b]<>rp;
PythonForm[SP[a_,b_]]:="pp"<>PythonForm[a]<>".pp"<>PythonForm[b];
PythonForm[IndexDelta[a_,b_]]:="deltaF"<>lp<>PythonForm[a]<>","<>PythonForm[b]<>rp;
(*PythonForm[T[a_,i_,j_]]:="Tc"<>lp<>PythonForm[i]<>","<>PythonForm[a]<>","<>PythonForm[j]<>rp;
PythonForm[f[a_,b_,c_]]:="Fc"<>lp<>PythonForm[a]<>","<>PythonForm[b]<>","<>PythonForm[c]<>rp;
PythonForm[Ta[a_,i_,j_]]:="Ta"<>lp<>PythonForm[i]<>","<>PythonForm[a]<>","<>PythonForm[j]<>rp;*)
(*PythonForm[FeynRules`Ta[a_,i_,j_]]:="Ta"<>lp<>PythonForm[i]<>","<>PythonForm[a]<>","<>PythonForm[j]<>rp;*)
PythonForm[SlashedP[a_]]:="pp"<>PythonForm[a];
PythonForm[SlashedP[a_,b_,c_]]:="gam"<>lp<>PythonForm[b]<>",pp"<>PythonForm[a]<>","<>PythonForm[c]<>rp;
PythonForm[SEVEN[a_,b_]]:="gam"<>lp<>PythonForm[a]<>",SEVEN,"<>PythonForm[b]<>rp;
PythonForm[SIX[a_,b_]]:="gam"<>lp<>PythonForm[a]<>",SIX,"<>PythonForm[b]<>rp;
(* Generic FR functions with arbitrary number of parameters *)
PythonForm[a_[b___]]:=PythonForm[a]<>lp<>StringRiffle[Map[PythonForm,List[b]],","]<>rp;
PythonForm[a_[b___][c_,d_]]:=PythonForm[a]<>lp<>PythonForm[c]<>","<>StringRiffle[Map[PythonForm,List[b]],","]<>","<>PythonForm[d]<>rp;
PythonForm[TensDot]:="gam";
PythonForm[eps]:="eps";
PythonForm[Ga[a_]]:=PythonForm[a];
(*Indices*)
PythonForm[Ext[a_]]:=PythonForm[a];
(*Do[
antes=IndexForm[[iji,1]];
despues=ToString[IndexForm[[iji,2]]];
PythonForm[Index[antes,b_]]:=despues<>despues<>PythonForm[b];
PythonForm[Index[FeynRules`antes,b_]]:=despues<>despues<>PythonForm[b];
,{iji,Length[IndexForm],1,-1}];*)
(*PythonForm[Index[FeynRules`SU2W,b_]]:="jj"<>PythonForm[b];
PythonForm[Index[FeynRules`SU2D,b_]]:="ll"<>PythonForm[b];
PythonForm[Index[Colour,b_]]:="ii"<>PythonForm[b];
PythonForm[Index[FeynRules`Generation,b_]]:="ff"<>PythonForm[b];
PythonForm[Index[Gluon,b_]]:="aa"<>PythonForm[b];*)
(*PythonForm[Index[IndexForm[[1,1]],b_]]:=ToString[IndexForm[[1,2]]]<>ToString[IndexForm[[1,2]]]<>PythonForm[b];
PythonForm[Index[IndexForm[[2,1]],b_]]:=ToString[IndexForm[[2,2]]]<>ToString[IndexForm[[2,2]]]<>PythonForm[b];
PythonForm[Index[IndexForm[[3,1]],b_]]:=ToString[IndexForm[[3,2]]]<>ToString[IndexForm[[3,2]]]<>PythonForm[b];
PythonForm[Index[IndexForm[[4,1]],b_]]:=ToString[IndexForm[[4,2]]]<>ToString[IndexForm[[4,2]]]<>PythonForm[b];
PythonForm[Index[IndexForm[[5,1]],b_]]:=ToString[IndexForm[[5,2]]]<>ToString[IndexForm[[5,2]]]<>PythonForm[b];*)
(*PythonForm[Index[Spin,b_]]:="yy"<>PythonForm[b];
PythonForm[Index[Lorentz,b_]]:="mumu"<>PythonForm[b];*)
PythonForm[Index[a_,b_]]:=ToString[IndexAssoc[a]]<>ToString[IndexAssoc[a]]<>PythonForm[b];
PythonForm[allother_]:=ToString[allother];
(*Greek characters*)greekrule={"\[Alpha]"->"alpha","\[Beta]"->"beta","\[Gamma]"->"gamma","\[Delta]"->"delta","\[CurlyEpsilon]"->"curlyepsilon","\[Zeta]"->"zeta","\[Eta]"->"eta","\[Theta]"->"theta","\[Iota]"->"iota","\[Kappa]"->"kappa","\[Lambda]"->"lambda","\[Mu]"->"mu","\[Nu]"->"nu","\[Xi]"->"xi","\[Omicron]"->"omicron","\[Pi]"->"pi","\[Rho]"->"rho","\[FinalSigma]"->"finalsigma","\[Sigma]"->"sigma","\[Tau]"->"tau","\[Upsilon]"->"upsilon","\[CurlyPhi]"->"curlyphi","\[Chi]"->"chi","\[Psi]"->"psi","\[Omega]"->"omega","\[CapitalAlpha]"->"Alpha","\[CapitalBeta]"->"Beta","\[CapitalGamma]"->"Gamma","\[CapitalDelta]"->"Delta","\[CapitalEpsilon]"->"CurlyEpsilon","\[CapitalZeta]"->"Zeta","\[CapitalEta]"->"Eta","\[CapitalTheta]"->"Theta","\[CapitalIota]"->"Iota","\[CapitalKappa]"->"Kappa","\[CapitalLambda]"->"Lambda","\[CapitalMu]"->"Mu","\[CapitalNu]"->"Nu","\[CapitalXi]"->"Xi","\[CapitalOmicron]"->"Omicron","\[CapitalPi]"->"Pi","\[CapitalRho]"->"Rho","\[CapitalSigma]"->"Sigma","\[CapitalTau]"->"Tau","\[CapitalUpsilon]"->"Upsilon","\[CapitalPhi]"->"CurlyPhi","\[CapitalChi]"->"Chi","\[CapitalPsi]"->"Psi","\[CapitalOmega]"->"Omega"};
StringReplace[StringReplace[StringReplace[StringReplace[PythonForm[expression],{"SU2W$"->"minus","SU2D$"->"minus","Gluon$"->"minus","II"->"I","FR2QGRAF`Private`"->""}],{"$"->"minus"}],greekrule],{" "->""}]

]


GroupData=Block[{grouprepresentations,structureconstants},
grouprepresentations=Transpose[{MR$GaugeGroupList,((Representations/.MR$GaugeGroupRules[#])&/@MR$GaugeGroupList)/.Representations->{}}];
structureconstants=((StructureConstant/.MR$GaugeGroupRules[#])&/@MR$GaugeGroupList)/.StructureConstant->{};
Table[If[Length[grouprepresentations[[i,2]]]==0,grouprepresentations[[i]],{grouprepresentations[[i,1]],structureconstants[[i]],Join[Transpose[grouprepresentations[[i,2]]],{MR$IndForm[#]&/@Transpose[grouprepresentations[[i,2]]][[2]]},{Length[IndexRange[Index[#]]]&/@Transpose[grouprepresentations[[i,2]]][[2]]}]//Transpose}],{i,Length[grouprepresentations]}]]


WriteSymbolsFunctions[params_,modelname_]:=Module[{newsymbols,newsymbolsbar,newfunctions,newfunctionsbar,groupgenerators,str,modeldataname,indices,structureconstants,gaugeindices,gaugeindexranges,indiceswithdimensions},
modeldataname=FileNameJoin[{modelname,"model_data"}];
newsymbols=Extract[MR$ParameterList,Position[Indices/.MR$ParameterRules[#]&/@ MR$ParameterList,Indices]];
newfunctions=Complement[MR$ParameterList,Extract[MR$ParameterList,Position[Indices/.MR$ParameterRules[#]&/@ MR$ParameterList,Indices]]];
newsymbolsbar=ToExpression[ToString[#]<>"bar"]&/@Extract[newsymbols,Position[ComplexParameter/.MR$ParameterRules[#]&/@newsymbols,True]];
newfunctionsbar=ToExpression[ToString[#]<>"bar"]&/@Extract[newfunctions,Position[ComplexParameter/.MR$ParameterRules[#]&/@newfunctions,True||ComplexParameter]];
groupgenerators=Transpose[Flatten[DeleteCases[((Representations/.MR$GaugeGroupRules[#])&/@MR$GaugeGroupList),Representations],1]][[1]];
structureconstants=Flatten[DeleteCases[((StructureConstant/.MR$GaugeGroupRules[#])&/@MR$GaugeGroupList),StructureConstant]];
indices=Transpose[IndexForm][[2]];
gaugeindices=Transpose[Flatten[DeleteCases[(Representations/.MR$GaugeGroupRules[#])&/@MR$GaugeGroupList,Representations],1]][[2]];
gaugeindexranges=Length/@IndexRange/@Index/@gaugeindices;
indiceswithdimensions=Table[ToString[IndexForm[[jiji,2]]]<>"="<>IndexForm[[jiji,3]],{jiji,Length[IndexForm]}];
str=OpenWrite[FileNameJoin[{modeldataname,"gaugedata"}],FormatType->OutputForm];
Do[
Write[str,StringRiffle[ToString/@Drop[GroupData[[i]],-1]]];
Do[
Write[str,StringRiffle[ToString/@GroupData[[i]][[-1,j]]]];
,{j,Length[GroupData[[i,-1]]]}]
,{i,Length[GroupData]}];
Close[str];
Export[FileNameJoin[{modeldataname,"newgaugeindices"}],Transpose[Join[{MR$IndForm/@gaugeindices,Length/@IndexRange/@Index/@gaugeindices}]],"Table"];
(*tiri=Table[{params[[i,1]],Length[Indices/.params[[i,2]]],ComplexParameter/.params[[i,2]]},{i,Length[params]}];
newsymbols={};
newfunctions={};
Do[If[tiri[[i,2]]\[Equal]0,AppendTo[newsymbols,tiri[[i,1]]];If[tiri[[i,3]],AppendTo[newsymbols,ToExpression[ToString[tiri[[i,1]]]<>"bar"]]],AppendTo[newfunctions,tiri[[i,1]]];AppendTo[newfunctions,ToExpression[ToString[tiri[[i,1]]]<>"bar"]]];,{i,Length[tiri]}];*)
str=OpenWrite[FileNameJoin[{modeldataname,"newsymbols"}],FormatType->OutputForm];
Do[Write[str,ToString[newsymbols[[ii]]]];,{ii,Length[newsymbols]}];
Do[Write[str,ToString[newsymbolsbar[[ii]]]];,{ii,Length[newsymbolsbar]}];
Close[str];
str=OpenWrite[FileNameJoin[{modeldataname,"newfunctions"}],FormatType->OutputForm];
Do[Write[str,ToString[newfunctions[[ii]]]];,{ii,Length[newfunctions]}];
Do[Write[str,ToString[newfunctionsbar[[ii]]]];,{ii,Length[newfunctionsbar]}];
Do[Write[str,ToString[groupgenerators[[ii]]]];,{ii,Length[groupgenerators]}];
Do[Write[str,ToString[structureconstants[[ii]]]];,{ii,Length[structureconstants]}];
Close[str];
str=OpenWrite[FileNameJoin[{modeldataname,"newindices"}],FormatType->OutputForm];
(*Do[Write[str,ToString[indices[[ii]]]];,{ii,Length[indices]}];*)
Do[Write[str,indiceswithdimensions[[ii]]];,{ii,Length[indiceswithdimensions]}];
Close[str];];




WriteQGRAFModel[classes_,feynrules_,modelname_]:=Block[{masslist,partsandmass,str,sta,ta,partis,tas,res,massless,massive,masslesslist,massivelist,masslist0,datamasslist,modeldataname},
masslist={};
modeldataname=FileNameJoin[{modelname,"model_data"}];
partsandmass={};
Print["Let's write the Qgraf model"];
str=OpenWrite[FileNameJoin[{modelname,"model"}],FormatType->OutputForm];
Write[str,"* propagators"];
Write[str,""];
Do[If[MemberQ[{F,U},classes[[i,1,0]]],sta="-",sta="+"];
ta=ClassName/.classes[[i,2]];
If[!UnphysicalQ[ta],partis=ClassMemberList[ta];
Do[AppendTo[masslist,Mass/.classes[[i,2]]];
tas=ToString[partis[[j]]];
AppendTo[partsandmass,{tas,masslist[[-1]]}];
If[SelfConjugateQ[ta],res="  ["<>tas<>", "<>tas<>", "<>sta<>"]",res="  ["<>tas<>", "<>tas<>"bar, "<>sta<>"]";];
(*Print[res];*)Write[str,res];,{j,Length[partis]}]];,{i,Length[classes]}];
Write[str,""];
Write[str,"* vertices"];
(*Print[""];
Print["* vertices"];*)
Do[res=StringReplace[ToString[Transpose[feynrules[[i,1]]][[1]]],{"{"->"[","}"->"]"," "->""}];
(*Print[res];*)If[Length[feynrules[[i,1]]]>2,Write[str,res];],{i,Length[feynrules]}];
Close[str];
massless=Transpose[Select[partsandmass,ToString[#[[2]]]=="0"&]][[1]];
Off[Transpose::nmtx];
massive=Transpose[Select[partsandmass,ToString[#[[2]]]!="0"&]][[1]];
On[Transpose::nmtx];
If[Length[massless]>0,masslesslist=ToString[massless[[1]]];
Do[masslesslist=masslesslist<>", "<>ToString[massless[[i]]],{i,2,Length[massless]}],masslesslist<>""];
If[Length[massive]>0,massivelist=ToString[massive[[1]]];
Do[massivelist=massivelist<>", "<>ToString[massive[[i]]],{i,2,Length[massive]}],massivelist=""];
Export[FileNameJoin[{modeldataname,"listlight"}],masslesslist,"Text"];
Export[FileNameJoin[{modeldataname,"listheavy"}],massivelist,"Text"];
(*Print["masslesslist",masslesslist];
Print["massivelist",massivelist];*)
masslist0=Union[masslist];
datamasslist="";
Do[datamasslist=datamasslist<>ToString[masslist0[[i]]]<>"  ",{i,Length[masslist0]}];
(*Print[datamasslist];*)
Export[FileNameJoin[{modeldataname,"listmass"}],datamasslist,"Text"];];



ComputePropagator[a_]:=Block[{indexlist,indexfactors,den,num,parts},
parts=ToString[a]<>" "<>ToString[a];
If[!SelfConjugateQ[a],parts=parts<>"bar"];
indexlist=ToString/@IndexAssoc/@Flatten[Apply[List,Particle2IndexAssoc[a],2]];
indexfactors=StringJoin@@Table["*deltaF("<>indexlist[[i]]<>indexlist[[i]]<>"1,"<>indexlist[[i]]<>indexlist[[i]]<>"2)"
,{i,Length[indexlist]}];
den="*prop(pp1,"<>ToString[Particle2MassAssoc[a]]<>")";
num=" I"<>Switch[Particle2TypeAssoc[a],V,"*(-1)*deltaF("<>ToString[IndexAssoc[Lorentz]]<>ToString[IndexAssoc[Lorentz]]<>"1,"<>ToString[IndexAssoc[Lorentz]]<>ToString[IndexAssoc[Lorentz]]<>"2)",F,"*(gam("<>ToString[IndexAssoc[Spin]]<>ToString[IndexAssoc[Spin]]<>"1,pp1,"<>ToString[IndexAssoc[Spin]]<>ToString[IndexAssoc[Spin]]<>"2)+"<>ToString[Particle2MassAssoc[a]]<>"*gi("<>ToString[IndexAssoc[Spin]]<>ToString[IndexAssoc[Spin]]<>"1,"<>ToString[IndexAssoc[Spin]]<>ToString[IndexAssoc[Spin]]<>"2))",_,""];
parts<>num<>den<>indexfactors
]



WritePropagators[classes_,modelname_]:=Module[{strprop,ta,partis,colorfactor,flavorfactor,su2factor,den,num,tas,res,modeldataname},
modeldataname=FileNameJoin[{modelname,"model_data"}];
strprop=OpenWrite[FileNameJoin[{modeldataname,"proplist"}],FormatType->OutputForm];
Do[
WriteString[strprop,ComputePropagator[PhysicalParticleList[[i]]]<>"\n"]
,{i,Length[PhysicalParticleList]}];
(*
ta=ClassName/.classes[[i,2]];
If[!UnphysicalQ[ta],
partis=ClassMemberList[ta];
colorfactor="";
If[Length[StringCases[ToString[Indices/.classes[[i,2]]],"Colour"]]>0,colorfactor="*deltaF(ii1,ii2)"];
If[Length[StringCases[ToString[Indices/.classes[[i,2]]],"Gluon"]]>0,colorfactor="*deltaF(aa1,aa2)"];
flavorfactor="";
If[Length[StringCases[ToString[Indices/.classes[[i,2]]],"Generation"]]>0,flavorfactor="*deltaF(ff1,ff2)"];
su2factor="";
If[Length[StringCases[ToString[Indices/.classes[[i,2]]],"SU2W"]]>0,su2factor="*deltaF(jj1,jj2)"];
If[Length[StringCases[ToString[Indices/.classes[[i,2]]],"SU2D"]]>0,su2factor="*deltaF(kk1,kk2)"];
den="*prop(pp1,"<>ToString[Mass/.classes[[i,2]]]<>")";
num="";
If[MemberQ[{S},classes[[i,1,0]]],num="I"];
If[MemberQ[{U},classes[[i,1,0]]],num="I"];
If[MemberQ[{V},classes[[i,1,0]]],num="(-I)*deltaF(mumu1,mumu2)"];
If[MemberQ[{F},classes[[i,1,0]]],num="I*(gam(yy1,pp1,yy2)+"<>ToString[Mass/.classes[[i,2]]]<>"*gi(yy1,yy2))"];
Do[tas=ToString[partis[[j]]];
If[SelfConjugateQ[ta],res=tas<>" "<>tas,res=tas<>" "<>tas<>"bar"];
WriteString[strprop,res<>" "<>num<>den<>colorfactor<>flavorfactor<>su2factor<>"\n"];,{j,Length[partis]}];];,{i,Length[classes]}];*)
Close[strprop];];


WritePropagatorsold[classes_,modelname_]:=Module[{strprop,sta,ta,partis,colorfactor,flavorfactor,su2factor,den,num,tas,res,modeldataname},
modeldataname=FileNameJoin[{modelname,"model_data"}];
strprop=OpenWrite[FileNameJoin[{modeldataname,"proplist"}],FormatType->OutputForm];
Do[If[MemberQ[{F,U},classes[[i,1,0]]],sta="-",sta="+"];
ta=ClassName/.classes[[i,2]];
If[!UnphysicalQ[ta],
partis=ClassMemberList[ta];
colorfactor="";
If[Length[StringCases[ToString[Indices/.classes[[i,2]]],"Colour"]]>0,colorfactor="*deltaF(ii1,ii2)"];
If[Length[StringCases[ToString[Indices/.classes[[i,2]]],"Gluon"]]>0,colorfactor="*deltaF(aa1,aa2)"];
flavorfactor="";
If[Length[StringCases[ToString[Indices/.classes[[i,2]]],"Generation"]]>0,flavorfactor="*deltaF(ff1,ff2)"];
su2factor="";
If[Length[StringCases[ToString[Indices/.classes[[i,2]]],"SU2W"]]>0,su2factor="*deltaF(jj1,jj2)"];
If[Length[StringCases[ToString[Indices/.classes[[i,2]]],"SU2D"]]>0,su2factor="*deltaF(kk1,kk2)"];
den="*prop(pp1,"<>ToString[Mass/.classes[[i,2]]]<>")";
num="";
If[MemberQ[{S},classes[[i,1,0]]],num="I"];
If[MemberQ[{U},classes[[i,1,0]]],num="I"];
If[MemberQ[{V},classes[[i,1,0]]],num="(-I)*deltaF(mumu1,mumu2)"];
If[MemberQ[{F},classes[[i,1,0]]],num="I*(gam(yy1,pp1,yy2)+"<>ToString[Mass/.classes[[i,2]]]<>"*gi(yy1,yy2))"];
Do[tas=ToString[partis[[j]]];
If[SelfConjugateQ[ta],res=tas<>" "<>tas,res=tas<>" "<>tas<>"bar"];
WriteString[strprop,res<>" "<>num<>den<>colorfactor<>flavorfactor<>su2factor<>"\n"];,{j,Length[partis]}];];,{i,Length[classes]}];
Close[strprop];];


WriteListParticles[classes_,modelname_]:=Module[{strcpol,ta,tata,partis,tas,res,strpol,listlightfermions,listlightquarks,listlightvectors,listlightscalars,allvectornames,listbackgroundvectors,modeldataname},
modeldataname=FileNameJoin[{modelname,"model_data"}];
listlightfermions={};
listlightquarks={};
listlightvectors={};
listlightscalars={};
listbackgroundvectors={};
allvectornames={};
Do[If[MemberQ[{V},classes[[i,1,0]]],AppendTo[allvectornames,ToString[ClassName/.classes[[i,2]]]]],{i,Length[classes]}];
(*cpol is for incoming momenta*)
Do[
ta=ClassName/.classes[[i,2]];
If[!UnphysicalQ[ta]&&ToString[Mass/.classes[[i,2]]]=="0",
Which[MemberQ[{S},classes[[i,1,0]]],AppendTo[listlightscalars,ta];If[!SelfConjugateQ[ta],AppendTo[listlightscalars,ToString[ta]<>"bar"]],MemberQ[{V},classes[[i,1,0]]],AppendTo[listlightvectors,ta];If[!SelfConjugateQ[ta],AppendTo[listlightvectors,ToString[ta]<>"bar"]],MemberQ[{F},classes[[i,1,0]]],AppendTo[listlightfermions,ta];If[!SelfConjugateQ[ta],AppendTo[listlightfermions,ToString[ta]<>"bar"]]]];
If[MemberQ[{F},classes[[i,1,0]]]&&MemberQ[Indices/.classes[[i,2]],Index[Colour]],AppendTo[listlightquarks,ta];If[!SelfConjugateQ[ta],AppendTo[listlightquarks,ToString[ta]<>"bar"]]];
If[MemberQ[{V},classes[[i,1,0]]]&&MemberQ[allvectornames,ToString[ta]<>"Quantum"],AppendTo[listbackgroundvectors,ta];If[!SelfConjugateQ[ta],AppendTo[listbackgroundvectors,ToString[ta]<>"bar"]]];
,{i,Length[classes]}];
strcpol=OpenWrite[FileNameJoin[{modeldataname,"listlightscalars"}],FormatType->OutputForm];
Write[strcpol,StringReplace[ToString[listlightscalars],{"{"->"","}"->"",","->", "}]];
Close[strcpol];
strcpol=OpenWrite[FileNameJoin[{modeldataname,"listlightfermions"}],FormatType->OutputForm];
Write[strcpol,StringReplace[ToString[listlightfermions],{"{"->"","}"->"",","->", "}]];
Close[strcpol];
strcpol=OpenWrite[FileNameJoin[{modeldataname,"listlightvectors"}],FormatType->OutputForm];
Write[strcpol,StringReplace[ToString[listlightvectors],{"{"->"","}"->"",","->", "}]];
Close[strcpol];
strcpol=OpenWrite[FileNameJoin[{modeldataname,"listlightquarks"}],FormatType->OutputForm];
Write[strcpol,StringReplace[ToString[listlightquarks],{"{"->"","}"->"",","->", "}]];
Close[strcpol];
strcpol=OpenWrite[FileNameJoin[{modeldataname,"listbackgroundvectors"}],FormatType->OutputForm];
Write[strcpol,StringReplace[ToString[listbackgroundvectors],{"{"->"","}"->"",","->", "}]];
Close[strcpol];
]



WritePolarizations[classes_,modelname_]:=Module[{strcpol,ta,tata,partis,tas,res,strpol,listlightfermions,listlightquarks,listlightvectors,listlightscalars,modeldataname},
modeldataname=FileNameJoin[{modelname,"model_data"}];
(*cpol is for incoming momenta*)
strcpol=OpenWrite[FileNameJoin[{modeldataname,"cpollist"}],FormatType->OutputForm];
Do[
ta=ClassName/.classes[[i,2]];
If[!UnphysicalQ[ta],
partis=ClassMemberList[ta];
Do[tas=ToString[partis[[j]]];
If[MemberQ[{S,U},classes[[i,1,0]]],res={tas<>"  1"};
If[!SelfConjugateQ[ta],AppendTo[res,tas<>"bar 1"]]];
If[MemberQ[{V},classes[[i,1,0]]],res={tas<>" Evect(pp1,mumu1)"};
If[!SelfConjugateQ[ta],AppendTo[res,tas<>"bar Evect(pp1,mumu1)"]]];
If[MemberQ[{F},classes[[i,1,0]]],res={tas<>" uspin(pp1,yy1)"};
If[!SelfConjugateQ[ta],AppendTo[res,tas<>"bar vbspin(pp1,yy1)"];]];
Do[Write[strcpol,res[[jj]]];,{jj,Length[res]}],{j,Length[partis]}]];,{i,Length[classes]}];
Close[strcpol];
(*pol is for outgoing momenta*)
strpol=OpenWrite[FileNameJoin[{modeldataname,"pollist"}],FormatType->OutputForm];
Do[ta=ClassName/.classes[[i,2]];
If[!UnphysicalQ[ta],partis=ClassMemberList[ta];
Do[tas=ToString[partis[[j]]];
If[MemberQ[{S,U},classes[[i,1,0]]],res={tas<>"  1"};
If[!SelfConjugateQ[ta],AppendTo[res,tas<>"bar 1"]]];
If[MemberQ[{V},classes[[i,1,0]]],res={tas<>" Evectbar(pp1,mumu1)"};
If[!SelfConjugateQ[ta],AppendTo[res,tas<>"bar Evectbar(pp1,mumu1)"]]];
If[MemberQ[{F},classes[[i,1,0]]],res={tas<>" ubspin(pp1,yy1)"};
If[!SelfConjugateQ[ta],AppendTo[res,tas<>"bar vspin(pp1,yy1)"];]];
Do[Write[strpol,res[[jj]]](*Print[res[[jj]]]*);,{jj,Length[res]}];,{j,Length[partis]}];];,{i,Length[classes]}];
Close[strpol];];



WriteVertices[feynrules_,modelname_]:=Module[{vertexnumber,str,parts,tala,re,modeldataname,frtext,gam2changesign},
modeldataname=FileNameJoin[{modelname,"model_data"}];
vertexnumber=Union[Table[Length[feynrules[[i,1]]],{i,Length[feynrules]}]];
str=Table[OpenWrite[FileNameJoin[{modeldataname,"v"<>ToString[vertexnumber[[i]]]<>"list"}],FormatType->OutputForm],{i,Length[vertexnumber]}];
Do[
parts=Transpose[feynrules[[i,1]]][[1]];
frtext=FR2Text[feynrules[[i,2]]];
(* This is done to put the correct sign for the four fermion interactions *)
gam2changesign=Select[StringCases[frtext,Shortest["gam[yy1"~~a__~~"]"]],StringContainsQ["yy4"]];
If[Length[parts]==4&&AllTrue[parts,FermionQ],frtext=StringReplace[frtext,Union[Table[gam2changesign[[i]]->"-"<>gam2changesign[[i]],{i,Length[gam2changesign]}]]]];
re=StringReplace[ToString[parts],{"{"->"","}"->"",","->" "}]<>"  "<>StringReplace[frtext,{" "->""}];
WriteString[str[[Position[vertexnumber,Length[parts]][[1,1]]]],re<>"\n"];,{i,Length[feynrules]}];
Do[Close[str[[i]]],{i,Length[str]}];]


WriteMM[lag_]:=Block[{feynrules,classes,params,modelname,modeldataname},
feynrules=FeynmanRules[lag];
classes=M$ClassesDescription;
params=M$Parameters;
modelname=M$ModelName<>"_MM";
modeldataname=FileNameJoin[{modelname,"model_data"}];
If[DirectoryQ[modelname],DeleteDirectory[modelname,DeleteContents->True]];
CreateDirectory[modelname];
CreateDirectory[modeldataname];
Print["Writing new symbols and functions"];
WriteSymbolsFunctions[params,modelname];
Print["done"];
Print["Writing QGRAF model"];
WriteQGRAFModel[classes,feynrules,modelname];
Print["done"];
Print["Writing propagators"];
WritePropagators[classes,modelname];
Print["done"];
Print["Writing Polarizations"];
WritePolarizations[classes,modelname];
Print["done"];
Print["Writing Particle Lists"];
WriteListParticles[classes,modelname];
Print["done"];
Print["Writing vertices"];
WriteVertices[feynrules,modelname];
Print["Model done"];]


End[]


EndPackage[]
